# Generated from JavaScriptParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .JavaScriptParserBase import JavaScriptParserBase
else:
    from JavaScriptParserBase import JavaScriptParserBase


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0081")
        buf.write("\u0407\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\3\2\5\2\u009e\n\2\3\2\5\2\u00a1\n\2\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00bb\n\4\3\5\3\5")
        buf.write("\5\5\u00bf\n\5\3\5\3\5\3\6\6\6\u00c4\n\6\r\6\16\6\u00c5")
        buf.write("\3\7\3\7\3\7\3\b\5\b\u00cc\n\b\3\b\3\b\5\b\u00d0\n\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u00d7\n\b\3\t\3\t\3\t\3\t\7\t\u00dd")
        buf.write("\n\t\f\t\16\t\u00e0\13\t\3\t\3\t\5\t\u00e4\n\t\5\t\u00e6")
        buf.write("\n\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\5\13\u00ef\n\13\3\13")
        buf.write("\3\13\5\13\u00f3\n\13\3\f\3\f\3\f\3\r\3\r\3\r\5\r\u00fb")
        buf.write("\n\r\3\16\3\16\3\16\5\16\u0100\n\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0109\n\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\5\17\u0111\n\17\3\17\3\17\5\17\u0115\n\17\3\20")
        buf.write("\3\20\3\20\5\20\u011a\n\20\3\21\3\21\3\21\3\22\3\22\3")
        buf.write("\22\3\22\7\22\u0123\n\22\f\22\16\22\u0126\13\22\3\23\3")
        buf.write("\23\3\23\5\23\u012b\n\23\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u013a\n\26\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u014e\n\27\3")
        buf.write("\27\3\27\5\27\u0152\n\27\3\27\3\27\5\27\u0156\n\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\5\27\u015e\n\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\5\27\u0167\n\27\3\27\3\27\3\27")
        buf.write("\5\27\u016c\n\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0174")
        buf.write("\n\27\3\30\3\30\3\30\5\30\u0179\n\30\3\31\3\31\3\31\5")
        buf.write("\31\u017e\n\31\3\31\3\31\3\32\3\32\3\32\5\32\u0185\n\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\5\33\u018c\n\33\3\33\3\33\3")
        buf.write("\34\3\34\3\34\5\34\u0193\n\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\5\37\u01a5\n\37\3\37\3\37\5\37\u01a9\n\37\5\37\u01ab")
        buf.write("\n\37\3\37\3\37\3 \6 \u01b0\n \r \16 \u01b1\3!\3!\3!\3")
        buf.write("!\5!\u01b8\n!\3\"\3\"\3\"\5\"\u01bd\n\"\3#\3#\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3%\3%\3%\3%\5%\u01cc\n%\3%\5%\u01cf\n%\3")
        buf.write("&\3&\3&\5&\u01d4\n&\3&\5&\u01d7\n&\3&\3&\3\'\3\'\3\'\3")
        buf.write("(\3(\3(\3)\5)\u01e2\n)\3)\3)\5)\u01e6\n)\3)\3)\3)\5)\u01eb")
        buf.write("\n)\3)\3)\3)\3*\3*\3*\3*\3+\3+\5+\u01f6\n+\3+\3+\7+\u01fa")
        buf.write("\n+\f+\16+\u01fd\13+\3+\3+\3,\3,\3,\3,\7,\u0205\n,\f,")
        buf.write("\16,\u0208\13,\3,\3,\3,\3,\3,\3,\5,\u0210\n,\3,\3,\5,")
        buf.write("\u0214\n,\3,\3,\3,\3,\5,\u021a\n,\3-\5-\u021d\n-\3-\5")
        buf.write("-\u0220\n-\3-\3-\3-\5-\u0225\n-\3-\3-\3-\3-\5-\u022b\n")
        buf.write("-\3-\5-\u022e\n-\3-\3-\3-\3-\3-\3-\5-\u0236\n-\3-\5-\u0239")
        buf.write("\n-\3-\3-\3-\5-\u023e\n-\3-\3-\3-\5-\u0243\n-\3.\3.\3")
        buf.write(".\7.\u0248\n.\f.\16.\u024b\13.\3.\3.\5.\u024f\n.\3.\5")
        buf.write(".\u0252\n.\3/\3/\3/\5/\u0257\n/\3\60\3\60\3\60\3\61\3")
        buf.write("\61\5\61\u025e\n\61\3\61\3\61\3\62\6\62\u0263\n\62\r\62")
        buf.write("\16\62\u0264\3\63\3\63\3\63\3\63\3\64\7\64\u026c\n\64")
        buf.write("\f\64\16\64\u026f\13\64\3\64\5\64\u0272\n\64\3\64\6\64")
        buf.write("\u0275\n\64\r\64\16\64\u0276\3\64\7\64\u027a\n\64\f\64")
        buf.write("\16\64\u027d\13\64\3\64\7\64\u0280\n\64\f\64\16\64\u0283")
        buf.write("\13\64\3\65\5\65\u0286\n\65\3\65\3\65\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0295\n\66")
        buf.write("\3\66\5\66\u0298\n\66\3\66\3\66\3\66\5\66\u029d\n\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\5\66\u02ae\n\66\3\66\5\66\u02b1\n")
        buf.write("\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u02ba\n\67")
        buf.write("\38\38\38\38\78\u02c0\n8\f8\168\u02c3\138\38\58\u02c6")
        buf.write("\n8\58\u02c8\n8\38\38\39\59\u02cd\n9\39\39\59\u02d1\n")
        buf.write("9\3:\3:\3:\7:\u02d6\n:\f:\16:\u02d9\13:\3;\3;\3;\3;\5")
        buf.write(";\u02df\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u030f\n;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\5;\u034f\n;\3;\3;\5;\u0353\n;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\7;\u0360\n;\f;\16;\u0363")
        buf.write("\13;\3<\3<\3<\5<\u0368\n<\3=\3=\3=\3=\7=\u036e\n=\f=\16")
        buf.write("=\u0371\13=\5=\u0373\n=\3=\5=\u0376\n=\3=\3=\3>\3>\5>")
        buf.write("\u037c\n>\3>\3>\5>\u0380\n>\3>\3>\5>\u0384\n>\3>\3>\3")
        buf.write(">\5>\u0389\n>\3>\3>\3>\3>\5>\u038f\n>\3?\3?\3?\5?\u0394")
        buf.write("\n?\3?\5?\u0397\n?\3@\3@\5@\u039b\n@\3A\3A\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u03a6\nB\3C\3C\7C\u03aa\nC\fC\16C\u03ad")
        buf.write("\13C\3C\3C\3D\3D\3D\3D\3D\5D\u03b6\nD\3E\3E\3F\3F\3G\3")
        buf.write("G\3G\3G\3H\3H\3H\3H\3I\3I\5I\u03c6\nI\3J\3J\3K\3K\3K\5")
        buf.write("K\u03cd\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u03fd\nL\3")
        buf.write("M\3M\3N\3N\3N\3N\5N\u0405\nN\3N\2\3tO\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\2\f\3\2\33\35\3\2\27\30\3\2!#\3\2$\'\3\2(+\3\2\61<\3")
        buf.write("\2@D\3\2EH\5\2llppxx\3\2op\2\u04ab\2\u009d\3\2\2\2\4\u00a4")
        buf.write("\3\2\2\2\6\u00ba\3\2\2\2\b\u00bc\3\2\2\2\n\u00c3\3\2\2")
        buf.write("\2\f\u00c7\3\2\2\2\16\u00d6\3\2\2\2\20\u00d8\3\2\2\2\22")
        buf.write("\u00e9\3\2\2\2\24\u00ee\3\2\2\2\26\u00f4\3\2\2\2\30\u00f7")
        buf.write("\3\2\2\2\32\u0108\3\2\2\2\34\u0114\3\2\2\2\36\u0119\3")
        buf.write("\2\2\2 \u011b\3\2\2\2\"\u011e\3\2\2\2$\u0127\3\2\2\2&")
        buf.write("\u012c\3\2\2\2(\u012e\3\2\2\2*\u0132\3\2\2\2,\u0173\3")
        buf.write("\2\2\2.\u0178\3\2\2\2\60\u017a\3\2\2\2\62\u0181\3\2\2")
        buf.write("\2\64\u0188\3\2\2\2\66\u018f\3\2\2\28\u0196\3\2\2\2:\u019c")
        buf.write("\3\2\2\2<\u01a2\3\2\2\2>\u01af\3\2\2\2@\u01b3\3\2\2\2")
        buf.write("B\u01b9\3\2\2\2D\u01be\3\2\2\2F\u01c2\3\2\2\2H\u01c7\3")
        buf.write("\2\2\2J\u01d0\3\2\2\2L\u01da\3\2\2\2N\u01dd\3\2\2\2P\u01e1")
        buf.write("\3\2\2\2R\u01ef\3\2\2\2T\u01f5\3\2\2\2V\u0219\3\2\2\2")
        buf.write("X\u0242\3\2\2\2Z\u0251\3\2\2\2\\\u0253\3\2\2\2^\u0258")
        buf.write("\3\2\2\2`\u025b\3\2\2\2b\u0262\3\2\2\2d\u0266\3\2\2\2")
        buf.write("f\u026d\3\2\2\2h\u0285\3\2\2\2j\u02b0\3\2\2\2l\u02b9\3")
        buf.write("\2\2\2n\u02bb\3\2\2\2p\u02cc\3\2\2\2r\u02d2\3\2\2\2t\u030e")
        buf.write("\3\2\2\2v\u0367\3\2\2\2x\u0369\3\2\2\2z\u038e\3\2\2\2")
        buf.write("|\u0396\3\2\2\2~\u039a\3\2\2\2\u0080\u039c\3\2\2\2\u0082")
        buf.write("\u03a5\3\2\2\2\u0084\u03a7\3\2\2\2\u0086\u03b5\3\2\2\2")
        buf.write("\u0088\u03b7\3\2\2\2\u008a\u03b9\3\2\2\2\u008c\u03bb\3")
        buf.write("\2\2\2\u008e\u03bf\3\2\2\2\u0090\u03c5\3\2\2\2\u0092\u03c7")
        buf.write("\3\2\2\2\u0094\u03cc\3\2\2\2\u0096\u03fc\3\2\2\2\u0098")
        buf.write("\u03fe\3\2\2\2\u009a\u0404\3\2\2\2\u009c\u009e\7\3\2\2")
        buf.write("\u009d\u009c\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u00a0\3")
        buf.write("\2\2\2\u009f\u00a1\5b\62\2\u00a0\u009f\3\2\2\2\u00a0\u00a1")
        buf.write("\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a3\7\2\2\3\u00a3")
        buf.write("\3\3\2\2\2\u00a4\u00a5\5\6\4\2\u00a5\5\3\2\2\2\u00a6\u00bb")
        buf.write("\5\b\5\2\u00a7\u00bb\5 \21\2\u00a8\u00bb\5\f\7\2\u00a9")
        buf.write("\u00bb\5\32\16\2\u00aa\u00bb\5&\24\2\u00ab\u00bb\5R*\2")
        buf.write("\u00ac\u00bb\5(\25\2\u00ad\u00bb\5*\26\2\u00ae\u00bb\5")
        buf.write(",\27\2\u00af\u00bb\5\60\31\2\u00b0\u00bb\5\62\32\2\u00b1")
        buf.write("\u00bb\5\64\33\2\u00b2\u00bb\5\66\34\2\u00b3\u00bb\58")
        buf.write("\35\2\u00b4\u00bb\5D#\2\u00b5\u00bb\5:\36\2\u00b6\u00bb")
        buf.write("\5F$\2\u00b7\u00bb\5H%\2\u00b8\u00bb\5N(\2\u00b9\u00bb")
        buf.write("\5P)\2\u00ba\u00a6\3\2\2\2\u00ba\u00a7\3\2\2\2\u00ba\u00a8")
        buf.write("\3\2\2\2\u00ba\u00a9\3\2\2\2\u00ba\u00aa\3\2\2\2\u00ba")
        buf.write("\u00ab\3\2\2\2\u00ba\u00ac\3\2\2\2\u00ba\u00ad\3\2\2\2")
        buf.write("\u00ba\u00ae\3\2\2\2\u00ba\u00af\3\2\2\2\u00ba\u00b0\3")
        buf.write("\2\2\2\u00ba\u00b1\3\2\2\2\u00ba\u00b2\3\2\2\2\u00ba\u00b3")
        buf.write("\3\2\2\2\u00ba\u00b4\3\2\2\2\u00ba\u00b5\3\2\2\2\u00ba")
        buf.write("\u00b6\3\2\2\2\u00ba\u00b7\3\2\2\2\u00ba\u00b8\3\2\2\2")
        buf.write("\u00ba\u00b9\3\2\2\2\u00bb\7\3\2\2\2\u00bc\u00be\7\13")
        buf.write("\2\2\u00bd\u00bf\5\n\6\2\u00be\u00bd\3\2\2\2\u00be\u00bf")
        buf.write("\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\7\r\2\2\u00c1")
        buf.write("\t\3\2\2\2\u00c2\u00c4\5\6\4\2\u00c3\u00c2\3\2\2\2\u00c4")
        buf.write("\u00c5\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2")
        buf.write("\u00c6\13\3\2\2\2\u00c7\u00c8\7k\2\2\u00c8\u00c9\5\16")
        buf.write("\b\2\u00c9\r\3\2\2\2\u00ca\u00cc\5\22\n\2\u00cb\u00ca")
        buf.write("\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd")
        buf.write("\u00d0\5\24\13\2\u00ce\u00d0\5\20\t\2\u00cf\u00cd\3\2")
        buf.write("\2\2\u00cf\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2")
        buf.write("\5\26\f\2\u00d2\u00d3\5\u009aN\2\u00d3\u00d7\3\2\2\2\u00d4")
        buf.write("\u00d5\7y\2\2\u00d5\u00d7\5\u009aN\2\u00d6\u00cb\3\2\2")
        buf.write("\2\u00d6\u00d4\3\2\2\2\u00d7\17\3\2\2\2\u00d8\u00de\7")
        buf.write("\13\2\2\u00d9\u00da\5\30\r\2\u00da\u00db\7\17\2\2\u00db")
        buf.write("\u00dd\3\2\2\2\u00dc\u00d9\3\2\2\2\u00dd\u00e0\3\2\2\2")
        buf.write("\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e5\3")
        buf.write("\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e3\5\30\r\2\u00e2")
        buf.write("\u00e4\7\17\2\2\u00e3\u00e2\3\2\2\2\u00e3\u00e4\3\2\2")
        buf.write("\2\u00e4\u00e6\3\2\2\2\u00e5\u00e1\3\2\2\2\u00e5\u00e6")
        buf.write("\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\7\r\2\2\u00e8")
        buf.write("\21\3\2\2\2\u00e9\u00ea\5\30\r\2\u00ea\u00eb\7\17\2\2")
        buf.write("\u00eb\23\3\2\2\2\u00ec\u00ef\7\33\2\2\u00ed\u00ef\5\u0090")
        buf.write("I\2\u00ee\u00ec\3\2\2\2\u00ee\u00ed\3\2\2\2\u00ef\u00f2")
        buf.write("\3\2\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f3\5\u0090I\2\u00f2")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\25\3\2\2\2\u00f4")
        buf.write("\u00f5\7d\2\2\u00f5\u00f6\7y\2\2\u00f6\27\3\2\2\2\u00f7")
        buf.write("\u00fa\5\u0090I\2\u00f8\u00f9\7c\2\2\u00f9\u00fb\5\u0090")
        buf.write("I\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\31\3")
        buf.write("\2\2\2\u00fc\u00ff\7j\2\2\u00fd\u0100\5\34\17\2\u00fe")
        buf.write("\u0100\5\36\20\2\u00ff\u00fd\3\2\2\2\u00ff\u00fe\3\2\2")
        buf.write("\2\u0100\u0101\3\2\2\2\u0101\u0102\5\u009aN\2\u0102\u0109")
        buf.write("\3\2\2\2\u0103\u0104\7j\2\2\u0104\u0105\7]\2\2\u0105\u0106")
        buf.write("\5t;\2\u0106\u0107\5\u009aN\2\u0107\u0109\3\2\2\2\u0108")
        buf.write("\u00fc\3\2\2\2\u0108\u0103\3\2\2\2\u0109\33\3\2\2\2\u010a")
        buf.write("\u010b\5\24\13\2\u010b\u010c\5\26\f\2\u010c\u010d\5\u009a")
        buf.write("N\2\u010d\u0115\3\2\2\2\u010e\u0110\5\20\t\2\u010f\u0111")
        buf.write("\5\26\f\2\u0110\u010f\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write("\u0112\3\2\2\2\u0112\u0113\5\u009aN\2\u0113\u0115\3\2")
        buf.write("\2\2\u0114\u010a\3\2\2\2\u0114\u010e\3\2\2\2\u0115\35")
        buf.write("\3\2\2\2\u0116\u011a\5 \21\2\u0117\u011a\5R*\2\u0118\u011a")
        buf.write("\5P)\2\u0119\u0116\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u0118")
        buf.write("\3\2\2\2\u011a\37\3\2\2\2\u011b\u011c\5\"\22\2\u011c\u011d")
        buf.write("\5\u009aN\2\u011d!\3\2\2\2\u011e\u011f\5.\30\2\u011f\u0124")
        buf.write("\5$\23\2\u0120\u0121\7\17\2\2\u0121\u0123\5$\23\2\u0122")
        buf.write("\u0120\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125#\3\2\2\2\u0126\u0124\3\2\2")
        buf.write("\2\u0127\u012a\5v<\2\u0128\u0129\7\20\2\2\u0129\u012b")
        buf.write("\5t;\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b%")
        buf.write("\3\2\2\2\u012c\u012d\7\16\2\2\u012d\'\3\2\2\2\u012e\u012f")
        buf.write("\6\25\2\2\u012f\u0130\5r:\2\u0130\u0131\5\u009aN\2\u0131")
        buf.write(")\3\2\2\2\u0132\u0133\7^\2\2\u0133\u0134\7\t\2\2\u0134")
        buf.write("\u0135\5r:\2\u0135\u0136\7\n\2\2\u0136\u0139\5\6\4\2\u0137")
        buf.write("\u0138\7N\2\2\u0138\u013a\5\6\4\2\u0139\u0137\3\2\2\2")
        buf.write("\u0139\u013a\3\2\2\2\u013a+\3\2\2\2\u013b\u013c\7J\2\2")
        buf.write("\u013c\u013d\5\6\4\2\u013d\u013e\7X\2\2\u013e\u013f\7")
        buf.write("\t\2\2\u013f\u0140\5r:\2\u0140\u0141\7\n\2\2\u0141\u0142")
        buf.write("\5\u009aN\2\u0142\u0174\3\2\2\2\u0143\u0144\7X\2\2\u0144")
        buf.write("\u0145\7\t\2\2\u0145\u0146\5r:\2\u0146\u0147\7\n\2\2\u0147")
        buf.write("\u0148\5\6\4\2\u0148\u0174\3\2\2\2\u0149\u014a\7V\2\2")
        buf.write("\u014a\u014d\7\t\2\2\u014b\u014e\5r:\2\u014c\u014e\5\"")
        buf.write("\22\2\u014d\u014b\3\2\2\2\u014d\u014c\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\7\16\2\2\u0150")
        buf.write("\u0152\5r:\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0153\3\2\2\2\u0153\u0155\7\16\2\2\u0154\u0156\5r:\2")
        buf.write("\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3")
        buf.write("\2\2\2\u0157\u0158\7\n\2\2\u0158\u0174\5\6\4\2\u0159\u015a")
        buf.write("\7V\2\2\u015a\u015d\7\t\2\2\u015b\u015e\5t;\2\u015c\u015e")
        buf.write("\5\"\22\2\u015d\u015b\3\2\2\2\u015d\u015c\3\2\2\2\u015e")
        buf.write("\u015f\3\2\2\2\u015f\u0160\7a\2\2\u0160\u0161\5r:\2\u0161")
        buf.write("\u0162\7\n\2\2\u0162\u0163\5\6\4\2\u0163\u0174\3\2\2\2")
        buf.write("\u0164\u0166\7V\2\2\u0165\u0167\7m\2\2\u0166\u0165\3\2")
        buf.write("\2\2\u0166\u0167\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016b")
        buf.write("\7\t\2\2\u0169\u016c\5t;\2\u016a\u016c\5\"\22\2\u016b")
        buf.write("\u0169\3\2\2\2\u016b\u016a\3\2\2\2\u016c\u016d\3\2\2\2")
        buf.write("\u016d\u016e\5\u0092J\2\u016e\u016f\6\27\3\2\u016f\u0170")
        buf.write("\5r:\2\u0170\u0171\7\n\2\2\u0171\u0172\5\6\4\2\u0172\u0174")
        buf.write("\3\2\2\2\u0173\u013b\3\2\2\2\u0173\u0143\3\2\2\2\u0173")
        buf.write("\u0149\3\2\2\2\u0173\u0159\3\2\2\2\u0173\u0164\3\2\2\2")
        buf.write("\u0174-\3\2\2\2\u0175\u0179\7P\2\2\u0176\u0179\5\u0098")
        buf.write("M\2\u0177\u0179\7i\2\2\u0178\u0175\3\2\2\2\u0178\u0176")
        buf.write("\3\2\2\2\u0178\u0177\3\2\2\2\u0179/\3\2\2\2\u017a\u017d")
        buf.write("\7U\2\2\u017b\u017c\6\31\4\2\u017c\u017e\5\u0092J\2\u017d")
        buf.write("\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f\3\2\2\2")
        buf.write("\u017f\u0180\5\u009aN\2\u0180\61\3\2\2\2\u0181\u0184\7")
        buf.write("I\2\2\u0182\u0183\6\32\5\2\u0183\u0185\5\u0092J\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0186\3\2\2\2")
        buf.write("\u0186\u0187\5\u009aN\2\u0187\63\3\2\2\2\u0188\u018b\7")
        buf.write("S\2\2\u0189\u018a\6\33\6\2\u018a\u018c\5r:\2\u018b\u0189")
        buf.write("\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018e\5\u009aN\2\u018e\65\3\2\2\2\u018f\u0192\7w\2\2")
        buf.write("\u0190\u0191\6\34\7\2\u0191\u0193\5r:\2\u0192\u0190\3")
        buf.write("\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195")
        buf.write("\5\u009aN\2\u0195\67\3\2\2\2\u0196\u0197\7\\\2\2\u0197")
        buf.write("\u0198\7\t\2\2\u0198\u0199\5r:\2\u0199\u019a\7\n\2\2\u019a")
        buf.write("\u019b\5\6\4\2\u019b9\3\2\2\2\u019c\u019d\7W\2\2\u019d")
        buf.write("\u019e\7\t\2\2\u019e\u019f\5r:\2\u019f\u01a0\7\n\2\2\u01a0")
        buf.write("\u01a1\5<\37\2\u01a1;\3\2\2\2\u01a2\u01a4\7\13\2\2\u01a3")
        buf.write("\u01a5\5> \2\u01a4\u01a3\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write("\u01aa\3\2\2\2\u01a6\u01a8\5B\"\2\u01a7\u01a9\5> \2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2")
        buf.write("\u01aa\u01a6\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\3")
        buf.write("\2\2\2\u01ac\u01ad\7\r\2\2\u01ad=\3\2\2\2\u01ae\u01b0")
        buf.write("\5@!\2\u01af\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01af")
        buf.write("\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2?\3\2\2\2\u01b3\u01b4")
        buf.write("\7M\2\2\u01b4\u01b5\5r:\2\u01b5\u01b7\7\22\2\2\u01b6\u01b8")
        buf.write("\5\n\6\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write("A\3\2\2\2\u01b9\u01ba\7]\2\2\u01ba\u01bc\7\22\2\2\u01bb")
        buf.write("\u01bd\5\n\6\2\u01bc\u01bb\3\2\2\2\u01bc\u01bd\3\2\2\2")
        buf.write("\u01bdC\3\2\2\2\u01be\u01bf\5\u0092J\2\u01bf\u01c0\7\22")
        buf.write("\2\2\u01c0\u01c1\5\6\4\2\u01c1E\3\2\2\2\u01c2\u01c3\7")
        buf.write("_\2\2\u01c3\u01c4\6$\b\2\u01c4\u01c5\5r:\2\u01c5\u01c6")
        buf.write("\5\u009aN\2\u01c6G\3\2\2\2\u01c7\u01c8\7b\2\2\u01c8\u01ce")
        buf.write("\5\b\5\2\u01c9\u01cb\5J&\2\u01ca\u01cc\5L\'\2\u01cb\u01ca")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cf\3\2\2\2\u01cd")
        buf.write("\u01cf\5L\'\2\u01ce\u01c9\3\2\2\2\u01ce\u01cd\3\2\2\2")
        buf.write("\u01cfI\3\2\2\2\u01d0\u01d6\7Q\2\2\u01d1\u01d3\7\t\2\2")
        buf.write("\u01d2\u01d4\5v<\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3\2")
        buf.write("\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d7\7\n\2\2\u01d6\u01d1")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8")
        buf.write("\u01d9\5\b\5\2\u01d9K\3\2\2\2\u01da\u01db\7R\2\2\u01db")
        buf.write("\u01dc\5\b\5\2\u01dcM\3\2\2\2\u01dd\u01de\7Y\2\2\u01de")
        buf.write("\u01df\5\u009aN\2\u01dfO\3\2\2\2\u01e0\u01e2\7l\2\2\u01e1")
        buf.write("\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2")
        buf.write("\u01e3\u01e5\7Z\2\2\u01e4\u01e6\7\33\2\2\u01e5\u01e4\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8")
        buf.write("\5\u0092J\2\u01e8\u01ea\7\t\2\2\u01e9\u01eb\5Z.\2\u01ea")
        buf.write("\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2")
        buf.write("\u01ec\u01ed\7\n\2\2\u01ed\u01ee\5`\61\2\u01eeQ\3\2\2")
        buf.write("\2\u01ef\u01f0\7e\2\2\u01f0\u01f1\5\u0092J\2\u01f1\u01f2")
        buf.write("\5T+\2\u01f2S\3\2\2\2\u01f3\u01f4\7g\2\2\u01f4\u01f6\5")
        buf.write("t;\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7")
        buf.write("\3\2\2\2\u01f7\u01fb\7\13\2\2\u01f8\u01fa\5V,\2\u01f9")
        buf.write("\u01f8\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2")
        buf.write("\u01fb\u01fc\3\2\2\2\u01fc\u01fe\3\2\2\2\u01fd\u01fb\3")
        buf.write("\2\2\2\u01fe\u01ff\7\r\2\2\u01ffU\3\2\2\2\u0200\u0205")
        buf.write("\7v\2\2\u0201\u0202\6,\t\2\u0202\u0205\5\u0092J\2\u0203")
        buf.write("\u0205\7l\2\2\u0204\u0200\3\2\2\2\u0204\u0201\3\2\2\2")
        buf.write("\u0204\u0203\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3")
        buf.write("\2\2\2\u0206\u0207\3\2\2\2\u0207\u020f\3\2\2\2\u0208\u0206")
        buf.write("\3\2\2\2\u0209\u0210\5X-\2\u020a\u020b\5v<\2\u020b\u020c")
        buf.write("\7\20\2\2\u020c\u020d\5x=\2\u020d\u020e\7\16\2\2\u020e")
        buf.write("\u0210\3\2\2\2\u020f\u0209\3\2\2\2\u020f\u020a\3\2\2\2")
        buf.write("\u0210\u021a\3\2\2\2\u0211\u021a\5&\24\2\u0212\u0214\7")
        buf.write(" \2\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0216\5l\67\2\u0216\u0217\7\20\2\2\u0217")
        buf.write("\u0218\5t;\2\u0218\u021a\3\2\2\2\u0219\u0206\3\2\2\2\u0219")
        buf.write("\u0211\3\2\2\2\u0219\u0213\3\2\2\2\u021aW\3\2\2\2\u021b")
        buf.write("\u021d\7\33\2\2\u021c\u021b\3\2\2\2\u021c\u021d\3\2\2")
        buf.write("\2\u021d\u021f\3\2\2\2\u021e\u0220\7 \2\2\u021f\u021e")
        buf.write("\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2\u0221")
        buf.write("\u0222\5l\67\2\u0222\u0224\7\t\2\2\u0223\u0225\5Z.\2\u0224")
        buf.write("\u0223\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0227\7\n\2\2\u0227\u0228\5`\61\2\u0228\u0243\3")
        buf.write("\2\2\2\u0229\u022b\7\33\2\2\u022a\u0229\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c\u022e\7 \2\2")
        buf.write("\u022d\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f\3")
        buf.write("\2\2\2\u022f\u0230\5\u008cG\2\u0230\u0231\7\t\2\2\u0231")
        buf.write("\u0232\7\n\2\2\u0232\u0233\5`\61\2\u0233\u0243\3\2\2\2")
        buf.write("\u0234\u0236\7\33\2\2\u0235\u0234\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0239\7 \2\2\u0238")
        buf.write("\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2")
        buf.write("\u023a\u023b\5\u008eH\2\u023b\u023d\7\t\2\2\u023c\u023e")
        buf.write("\5Z.\2\u023d\u023c\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0240\7\n\2\2\u0240\u0241\5`\61\2\u0241")
        buf.write("\u0243\3\2\2\2\u0242\u021c\3\2\2\2\u0242\u022a\3\2\2\2")
        buf.write("\u0242\u0235\3\2\2\2\u0243Y\3\2\2\2\u0244\u0249\5\\/\2")
        buf.write("\u0245\u0246\7\17\2\2\u0246\u0248\5\\/\2\u0247\u0245\3")
        buf.write("\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u0249\u024a")
        buf.write("\3\2\2\2\u024a\u024e\3\2\2\2\u024b\u0249\3\2\2\2\u024c")
        buf.write("\u024d\7\17\2\2\u024d\u024f\5^\60\2\u024e\u024c\3\2\2")
        buf.write("\2\u024e\u024f\3\2\2\2\u024f\u0252\3\2\2\2\u0250\u0252")
        buf.write("\5^\60\2\u0251\u0244\3\2\2\2\u0251\u0250\3\2\2\2\u0252")
        buf.write("[\3\2\2\2\u0253\u0256\5v<\2\u0254\u0255\7\20\2\2\u0255")
        buf.write("\u0257\5t;\2\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257")
        buf.write("]\3\2\2\2\u0258\u0259\7\23\2\2\u0259\u025a\5t;\2\u025a")
        buf.write("_\3\2\2\2\u025b\u025d\7\13\2\2\u025c\u025e\5b\62\2\u025d")
        buf.write("\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f\3\2\2\2")
        buf.write("\u025f\u0260\7\r\2\2\u0260a\3\2\2\2\u0261\u0263\5\4\3")
        buf.write("\2\u0262\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0262")
        buf.write("\3\2\2\2\u0264\u0265\3\2\2\2\u0265c\3\2\2\2\u0266\u0267")
        buf.write("\7\7\2\2\u0267\u0268\5f\64\2\u0268\u0269\7\b\2\2\u0269")
        buf.write("e\3\2\2\2\u026a\u026c\7\17\2\2\u026b\u026a\3\2\2\2\u026c")
        buf.write("\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2")
        buf.write("\u026e\u0271\3\2\2\2\u026f\u026d\3\2\2\2\u0270\u0272\5")
        buf.write("h\65\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u027b")
        buf.write("\3\2\2\2\u0273\u0275\7\17\2\2\u0274\u0273\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2")
        buf.write("\u0277\u0278\3\2\2\2\u0278\u027a\5h\65\2\u0279\u0274\3")
        buf.write("\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u0281\3\2\2\2\u027d\u027b\3\2\2\2\u027e")
        buf.write("\u0280\7\17\2\2\u027f\u027e\3\2\2\2\u0280\u0283\3\2\2")
        buf.write("\2\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2\u0282g\3\2")
        buf.write("\2\2\u0283\u0281\3\2\2\2\u0284\u0286\7\23\2\2\u0285\u0284")
        buf.write("\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287")
        buf.write("\u0288\5t;\2\u0288i\3\2\2\2\u0289\u028a\5l\67\2\u028a")
        buf.write("\u028b\7\22\2\2\u028b\u028c\5t;\2\u028c\u02b1\3\2\2\2")
        buf.write("\u028d\u028e\7\7\2\2\u028e\u028f\5t;\2\u028f\u0290\7\b")
        buf.write("\2\2\u0290\u0291\7\22\2\2\u0291\u0292\5t;\2\u0292\u02b1")
        buf.write("\3\2\2\2\u0293\u0295\7l\2\2\u0294\u0293\3\2\2\2\u0294")
        buf.write("\u0295\3\2\2\2\u0295\u0297\3\2\2\2\u0296\u0298\7\33\2")
        buf.write("\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299")
        buf.write("\3\2\2\2\u0299\u029a\5l\67\2\u029a\u029c\7\t\2\2\u029b")
        buf.write("\u029d\5Z.\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("\u029e\3\2\2\2\u029e\u029f\7\n\2\2\u029f\u02a0\5`\61\2")
        buf.write("\u02a0\u02b1\3\2\2\2\u02a1\u02a2\5\u008cG\2\u02a2\u02a3")
        buf.write("\7\t\2\2\u02a3\u02a4\7\n\2\2\u02a4\u02a5\5`\61\2\u02a5")
        buf.write("\u02b1\3\2\2\2\u02a6\u02a7\5\u008eH\2\u02a7\u02a8\7\t")
        buf.write("\2\2\u02a8\u02a9\5\\/\2\u02a9\u02aa\7\n\2\2\u02aa\u02ab")
        buf.write("\5`\61\2\u02ab\u02b1\3\2\2\2\u02ac\u02ae\7\23\2\2\u02ad")
        buf.write("\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02af\u02b1\5t;\2\u02b0\u0289\3\2\2\2\u02b0\u028d\3\2")
        buf.write("\2\2\u02b0\u0294\3\2\2\2\u02b0\u02a1\3\2\2\2\u02b0\u02a6")
        buf.write("\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b1k\3\2\2\2\u02b2\u02ba")
        buf.write("\5\u0090I\2\u02b3\u02ba\7y\2\2\u02b4\u02ba\5\u0088E\2")
        buf.write("\u02b5\u02b6\7\7\2\2\u02b6\u02b7\5t;\2\u02b7\u02b8\7\b")
        buf.write("\2\2\u02b8\u02ba\3\2\2\2\u02b9\u02b2\3\2\2\2\u02b9\u02b3")
        buf.write("\3\2\2\2\u02b9\u02b4\3\2\2\2\u02b9\u02b5\3\2\2\2\u02ba")
        buf.write("m\3\2\2\2\u02bb\u02c7\7\t\2\2\u02bc\u02c1\5p9\2\u02bd")
        buf.write("\u02be\7\17\2\2\u02be\u02c0\5p9\2\u02bf\u02bd\3\2\2\2")
        buf.write("\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3")
        buf.write("\2\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4\u02c6")
        buf.write("\7\17\2\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6")
        buf.write("\u02c8\3\2\2\2\u02c7\u02bc\3\2\2\2\u02c7\u02c8\3\2\2\2")
        buf.write("\u02c8\u02c9\3\2\2\2\u02c9\u02ca\7\n\2\2\u02cao\3\2\2")
        buf.write("\2\u02cb\u02cd\7\23\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd")
        buf.write("\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02d1\5t;\2\u02cf\u02d1")
        buf.write("\5\u0092J\2\u02d0\u02ce\3\2\2\2\u02d0\u02cf\3\2\2\2\u02d1")
        buf.write("q\3\2\2\2\u02d2\u02d7\5t;\2\u02d3\u02d4\7\17\2\2\u02d4")
        buf.write("\u02d6\5t;\2\u02d5\u02d3\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8s\3\2\2\2\u02d9")
        buf.write("\u02d7\3\2\2\2\u02da\u02db\b;\1\2\u02db\u030f\5z>\2\u02dc")
        buf.write("\u02de\7e\2\2\u02dd\u02df\5\u0092J\2\u02de\u02dd\3\2\2")
        buf.write("\2\u02de\u02df\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u030f")
        buf.write("\5T+\2\u02e1\u02e2\7O\2\2\u02e2\u02e3\5t;\2\u02e3\u02e4")
        buf.write("\5n8\2\u02e4\u030f\3\2\2\2\u02e5\u02e6\7O\2\2\u02e6\u030f")
        buf.write("\5t;,\u02e7\u02e8\7O\2\2\u02e8\u02e9\7\24\2\2\u02e9\u030f")
        buf.write("\5\u0092J\2\u02ea\u02eb\7`\2\2\u02eb\u030f\5t;\'\u02ec")
        buf.write("\u02ed\7T\2\2\u02ed\u030f\5t;&\u02ee\u02ef\7L\2\2\u02ef")
        buf.write("\u030f\5t;%\u02f0\u02f1\7\25\2\2\u02f1\u030f\5t;$\u02f2")
        buf.write("\u02f3\7\26\2\2\u02f3\u030f\5t;#\u02f4\u02f5\7\27\2\2")
        buf.write("\u02f5\u030f\5t;\"\u02f6\u02f7\7\30\2\2\u02f7\u030f\5")
        buf.write("t;!\u02f8\u02f9\7\31\2\2\u02f9\u030f\5t; \u02fa\u02fb")
        buf.write("\7\32\2\2\u02fb\u030f\5t;\37\u02fc\u02fd\7m\2\2\u02fd")
        buf.write("\u030f\5t;\36\u02fe\u02ff\7k\2\2\u02ff\u0300\7\t\2\2\u0300")
        buf.write("\u0301\5t;\2\u0301\u0302\7\n\2\2\u0302\u030f\3\2\2\2\u0303")
        buf.write("\u030f\5\66\34\2\u0304\u030f\7[\2\2\u0305\u030f\5\u0092")
        buf.write("J\2\u0306\u030f\7h\2\2\u0307\u030f\5\u0082B\2\u0308\u030f")
        buf.write("\5d\63\2\u0309\u030f\5x=\2\u030a\u030b\7\t\2\2\u030b\u030c")
        buf.write("\5r:\2\u030c\u030d\7\n\2\2\u030d\u030f\3\2\2\2\u030e\u02da")
        buf.write("\3\2\2\2\u030e\u02dc\3\2\2\2\u030e\u02e1\3\2\2\2\u030e")
        buf.write("\u02e5\3\2\2\2\u030e\u02e7\3\2\2\2\u030e\u02ea\3\2\2\2")
        buf.write("\u030e\u02ec\3\2\2\2\u030e\u02ee\3\2\2\2\u030e\u02f0\3")
        buf.write("\2\2\2\u030e\u02f2\3\2\2\2\u030e\u02f4\3\2\2\2\u030e\u02f6")
        buf.write("\3\2\2\2\u030e\u02f8\3\2\2\2\u030e\u02fa\3\2\2\2\u030e")
        buf.write("\u02fc\3\2\2\2\u030e\u02fe\3\2\2\2\u030e\u0303\3\2\2\2")
        buf.write("\u030e\u0304\3\2\2\2\u030e\u0305\3\2\2\2\u030e\u0306\3")
        buf.write("\2\2\2\u030e\u0307\3\2\2\2\u030e\u0308\3\2\2\2\u030e\u0309")
        buf.write("\3\2\2\2\u030e\u030a\3\2\2\2\u030f\u0361\3\2\2\2\u0310")
        buf.write("\u0311\f\35\2\2\u0311\u0312\7\36\2\2\u0312\u0360\5t;\35")
        buf.write("\u0313\u0314\f\34\2\2\u0314\u0315\t\2\2\2\u0315\u0360")
        buf.write("\5t;\35\u0316\u0317\f\33\2\2\u0317\u0318\t\3\2\2\u0318")
        buf.write("\u0360\5t;\34\u0319\u031a\f\32\2\2\u031a\u031b\7\37\2")
        buf.write("\2\u031b\u0360\5t;\33\u031c\u031d\f\31\2\2\u031d\u031e")
        buf.write("\t\4\2\2\u031e\u0360\5t;\32\u031f\u0320\f\30\2\2\u0320")
        buf.write("\u0321\t\5\2\2\u0321\u0360\5t;\31\u0322\u0323\f\27\2\2")
        buf.write("\u0323\u0324\7K\2\2\u0324\u0360\5t;\30\u0325\u0326\f\26")
        buf.write("\2\2\u0326\u0327\7a\2\2\u0327\u0360\5t;\27\u0328\u0329")
        buf.write("\f\25\2\2\u0329\u032a\t\6\2\2\u032a\u0360\5t;\26\u032b")
        buf.write("\u032c\f\24\2\2\u032c\u032d\7,\2\2\u032d\u0360\5t;\25")
        buf.write("\u032e\u032f\f\23\2\2\u032f\u0330\7-\2\2\u0330\u0360\5")
        buf.write("t;\24\u0331\u0332\f\22\2\2\u0332\u0333\7.\2\2\u0333\u0360")
        buf.write("\5t;\23\u0334\u0335\f\21\2\2\u0335\u0336\7/\2\2\u0336")
        buf.write("\u0360\5t;\22\u0337\u0338\f\20\2\2\u0338\u0339\7\60\2")
        buf.write("\2\u0339\u0360\5t;\21\u033a\u033b\f\17\2\2\u033b\u033c")
        buf.write("\7\21\2\2\u033c\u033d\5t;\2\u033d\u033e\7\22\2\2\u033e")
        buf.write("\u033f\5t;\20\u033f\u0360\3\2\2\2\u0340\u0341\f\16\2\2")
        buf.write("\u0341\u0342\7\20\2\2\u0342\u0360\5t;\16\u0343\u0344\f")
        buf.write("\r\2\2\u0344\u0345\5\u0080A\2\u0345\u0346\5t;\r\u0346")
        buf.write("\u0360\3\2\2\2\u0347\u0348\f/\2\2\u0348\u0349\7\7\2\2")
        buf.write("\u0349\u034a\5r:\2\u034a\u034b\7\b\2\2\u034b\u0360\3\2")
        buf.write("\2\2\u034c\u034e\f.\2\2\u034d\u034f\7\21\2\2\u034e\u034d")
        buf.write("\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0352\7\24\2\2\u0351\u0353\7 \2\2\u0352\u0351\3\2\2\2")
        buf.write("\u0352\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0360\5")
        buf.write("\u0090I\2\u0355\u0356\f+\2\2\u0356\u0360\5n8\2\u0357\u0358")
        buf.write("\f)\2\2\u0358\u0359\6;\37\2\u0359\u0360\7\25\2\2\u035a")
        buf.write("\u035b\f(\2\2\u035b\u035c\6;!\2\u035c\u0360\7\26\2\2\u035d")
        buf.write("\u035e\f\13\2\2\u035e\u0360\5\u0084C\2\u035f\u0310\3\2")
        buf.write("\2\2\u035f\u0313\3\2\2\2\u035f\u0316\3\2\2\2\u035f\u0319")
        buf.write("\3\2\2\2\u035f\u031c\3\2\2\2\u035f\u031f\3\2\2\2\u035f")
        buf.write("\u0322\3\2\2\2\u035f\u0325\3\2\2\2\u035f\u0328\3\2\2\2")
        buf.write("\u035f\u032b\3\2\2\2\u035f\u032e\3\2\2\2\u035f\u0331\3")
        buf.write("\2\2\2\u035f\u0334\3\2\2\2\u035f\u0337\3\2\2\2\u035f\u033a")
        buf.write("\3\2\2\2\u035f\u0340\3\2\2\2\u035f\u0343\3\2\2\2\u035f")
        buf.write("\u0347\3\2\2\2\u035f\u034c\3\2\2\2\u035f\u0355\3\2\2\2")
        buf.write("\u035f\u0357\3\2\2\2\u035f\u035a\3\2\2\2\u035f\u035d\3")
        buf.write("\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0362")
        buf.write("\3\2\2\2\u0362u\3\2\2\2\u0363\u0361\3\2\2\2\u0364\u0368")
        buf.write("\5\u0092J\2\u0365\u0368\5d\63\2\u0366\u0368\5x=\2\u0367")
        buf.write("\u0364\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0366\3\2\2\2")
        buf.write("\u0368w\3\2\2\2\u0369\u0372\7\13\2\2\u036a\u036f\5j\66")
        buf.write("\2\u036b\u036c\7\17\2\2\u036c\u036e\5j\66\2\u036d\u036b")
        buf.write("\3\2\2\2\u036e\u0371\3\2\2\2\u036f\u036d\3\2\2\2\u036f")
        buf.write("\u0370\3\2\2\2\u0370\u0373\3\2\2\2\u0371\u036f\3\2\2\2")
        buf.write("\u0372\u036a\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3")
        buf.write("\2\2\2\u0374\u0376\7\17\2\2\u0375\u0374\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\7\r\2\2")
        buf.write("\u0378y\3\2\2\2\u0379\u038f\5P)\2\u037a\u037c\7l\2\2\u037b")
        buf.write("\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u037f\7Z\2\2\u037e\u0380\7\33\2\2\u037f\u037e\3")
        buf.write("\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0383")
        buf.write("\7\t\2\2\u0382\u0384\5Z.\2\u0383\u0382\3\2\2\2\u0383\u0384")
        buf.write("\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386\7\n\2\2\u0386")
        buf.write("\u038f\5`\61\2\u0387\u0389\7l\2\2\u0388\u0387\3\2\2\2")
        buf.write("\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\5")
        buf.write("|?\2\u038b\u038c\7=\2\2\u038c\u038d\5~@\2\u038d\u038f")
        buf.write("\3\2\2\2\u038e\u0379\3\2\2\2\u038e\u037b\3\2\2\2\u038e")
        buf.write("\u0388\3\2\2\2\u038f{\3\2\2\2\u0390\u0397\5\u0092J\2\u0391")
        buf.write("\u0393\7\t\2\2\u0392\u0394\5Z.\2\u0393\u0392\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\7\n\2\2")
        buf.write("\u0396\u0390\3\2\2\2\u0396\u0391\3\2\2\2\u0397}\3\2\2")
        buf.write("\2\u0398\u039b\5t;\2\u0399\u039b\5`\61\2\u039a\u0398\3")
        buf.write("\2\2\2\u039a\u0399\3\2\2\2\u039b\177\3\2\2\2\u039c\u039d")
        buf.write("\t\7\2\2\u039d\u0081\3\2\2\2\u039e\u03a6\7>\2\2\u039f")
        buf.write("\u03a6\7?\2\2\u03a0\u03a6\7y\2\2\u03a1\u03a6\5\u0084C")
        buf.write("\2\u03a2\u03a6\7\6\2\2\u03a3\u03a6\5\u0088E\2\u03a4\u03a6")
        buf.write("\5\u008aF\2\u03a5\u039e\3\2\2\2\u03a5\u039f\3\2\2\2\u03a5")
        buf.write("\u03a0\3\2\2\2\u03a5\u03a1\3\2\2\2\u03a5\u03a2\3\2\2\2")
        buf.write("\u03a5\u03a3\3\2\2\2\u03a5\u03a4\3\2\2\2\u03a6\u0083\3")
        buf.write("\2\2\2\u03a7\u03ab\7z\2\2\u03a8\u03aa\5\u0086D\2\u03a9")
        buf.write("\u03a8\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2")
        buf.write("\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad\u03ab\3")
        buf.write("\2\2\2\u03ae\u03af\7z\2\2\u03af\u0085\3\2\2\2\u03b0\u03b6")
        buf.write("\7\u0081\2\2\u03b1\u03b2\7\u0080\2\2\u03b2\u03b3\5t;\2")
        buf.write("\u03b3\u03b4\7\f\2\2\u03b4\u03b6\3\2\2\2\u03b5\u03b0\3")
        buf.write("\2\2\2\u03b5\u03b1\3\2\2\2\u03b6\u0087\3\2\2\2\u03b7\u03b8")
        buf.write("\t\b\2\2\u03b8\u0089\3\2\2\2\u03b9\u03ba\t\t\2\2\u03ba")
        buf.write("\u008b\3\2\2\2\u03bb\u03bc\6G#\2\u03bc\u03bd\5\u0092J")
        buf.write("\2\u03bd\u03be\5l\67\2\u03be\u008d\3\2\2\2\u03bf\u03c0")
        buf.write("\6H$\2\u03c0\u03c1\5\u0092J\2\u03c1\u03c2\5l\67\2\u03c2")
        buf.write("\u008f\3\2\2\2\u03c3\u03c6\5\u0092J\2\u03c4\u03c6\5\u0094")
        buf.write("K\2\u03c5\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u0091")
        buf.write("\3\2\2\2\u03c7\u03c8\t\n\2\2\u03c8\u0093\3\2\2\2\u03c9")
        buf.write("\u03cd\5\u0096L\2\u03ca\u03cd\7>\2\2\u03cb\u03cd\7?\2")
        buf.write("\2\u03cc\u03c9\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cb")
        buf.write("\3\2\2\2\u03cd\u0095\3\2\2\2\u03ce\u03fd\7I\2\2\u03cf")
        buf.write("\u03fd\7J\2\2\u03d0\u03fd\7K\2\2\u03d1\u03fd\7L\2\2\u03d2")
        buf.write("\u03fd\7M\2\2\u03d3\u03fd\7N\2\2\u03d4\u03fd\7O\2\2\u03d5")
        buf.write("\u03fd\7P\2\2\u03d6\u03fd\7Q\2\2\u03d7\u03fd\7R\2\2\u03d8")
        buf.write("\u03fd\7S\2\2\u03d9\u03fd\7T\2\2\u03da\u03fd\7U\2\2\u03db")
        buf.write("\u03fd\7V\2\2\u03dc\u03fd\7W\2\2\u03dd\u03fd\7X\2\2\u03de")
        buf.write("\u03fd\7Y\2\2\u03df\u03fd\7Z\2\2\u03e0\u03fd\7[\2\2\u03e1")
        buf.write("\u03fd\7\\\2\2\u03e2\u03fd\7]\2\2\u03e3\u03fd\7^\2\2\u03e4")
        buf.write("\u03fd\7_\2\2\u03e5\u03fd\7`\2\2\u03e6\u03fd\7a\2\2\u03e7")
        buf.write("\u03fd\7b\2\2\u03e8\u03fd\7e\2\2\u03e9\u03fd\7f\2\2\u03ea")
        buf.write("\u03fd\7g\2\2\u03eb\u03fd\7h\2\2\u03ec\u03fd\7i\2\2\u03ed")
        buf.write("\u03fd\7j\2\2\u03ee\u03fd\7k\2\2\u03ef\u03fd\7n\2\2\u03f0")
        buf.write("\u03fd\5\u0098M\2\u03f1\u03fd\7q\2\2\u03f2\u03fd\7r\2")
        buf.write("\2\u03f3\u03fd\7s\2\2\u03f4\u03fd\7t\2\2\u03f5\u03fd\7")
        buf.write("u\2\2\u03f6\u03fd\7v\2\2\u03f7\u03fd\7w\2\2\u03f8\u03fd")
        buf.write("\7l\2\2\u03f9\u03fd\7m\2\2\u03fa\u03fd\7d\2\2\u03fb\u03fd")
        buf.write("\7c\2\2\u03fc\u03ce\3\2\2\2\u03fc\u03cf\3\2\2\2\u03fc")
        buf.write("\u03d0\3\2\2\2\u03fc\u03d1\3\2\2\2\u03fc\u03d2\3\2\2\2")
        buf.write("\u03fc\u03d3\3\2\2\2\u03fc\u03d4\3\2\2\2\u03fc\u03d5\3")
        buf.write("\2\2\2\u03fc\u03d6\3\2\2\2\u03fc\u03d7\3\2\2\2\u03fc\u03d8")
        buf.write("\3\2\2\2\u03fc\u03d9\3\2\2\2\u03fc\u03da\3\2\2\2\u03fc")
        buf.write("\u03db\3\2\2\2\u03fc\u03dc\3\2\2\2\u03fc\u03dd\3\2\2\2")
        buf.write("\u03fc\u03de\3\2\2\2\u03fc\u03df\3\2\2\2\u03fc\u03e0\3")
        buf.write("\2\2\2\u03fc\u03e1\3\2\2\2\u03fc\u03e2\3\2\2\2\u03fc\u03e3")
        buf.write("\3\2\2\2\u03fc\u03e4\3\2\2\2\u03fc\u03e5\3\2\2\2\u03fc")
        buf.write("\u03e6\3\2\2\2\u03fc\u03e7\3\2\2\2\u03fc\u03e8\3\2\2\2")
        buf.write("\u03fc\u03e9\3\2\2\2\u03fc\u03ea\3\2\2\2\u03fc\u03eb\3")
        buf.write("\2\2\2\u03fc\u03ec\3\2\2\2\u03fc\u03ed\3\2\2\2\u03fc\u03ee")
        buf.write("\3\2\2\2\u03fc\u03ef\3\2\2\2\u03fc\u03f0\3\2\2\2\u03fc")
        buf.write("\u03f1\3\2\2\2\u03fc\u03f2\3\2\2\2\u03fc\u03f3\3\2\2\2")
        buf.write("\u03fc\u03f4\3\2\2\2\u03fc\u03f5\3\2\2\2\u03fc\u03f6\3")
        buf.write("\2\2\2\u03fc\u03f7\3\2\2\2\u03fc\u03f8\3\2\2\2\u03fc\u03f9")
        buf.write("\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fb\3\2\2\2\u03fd")
        buf.write("\u0097\3\2\2\2\u03fe\u03ff\t\13\2\2\u03ff\u0099\3\2\2")
        buf.write("\2\u0400\u0405\7\16\2\2\u0401\u0405\7\2\2\3\u0402\u0405")
        buf.write("\6N%\2\u0403\u0405\6N&\2\u0404\u0400\3\2\2\2\u0404\u0401")
        buf.write("\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0403\3\2\2\2\u0405")
        buf.write("\u009b\3\2\2\2r\u009d\u00a0\u00ba\u00be\u00c5\u00cb\u00cf")
        buf.write("\u00d6\u00de\u00e3\u00e5\u00ee\u00f2\u00fa\u00ff\u0108")
        buf.write("\u0110\u0114\u0119\u0124\u012a\u0139\u014d\u0151\u0155")
        buf.write("\u015d\u0166\u016b\u0173\u0178\u017d\u0184\u018b\u0192")
        buf.write("\u01a4\u01a8\u01aa\u01b1\u01b7\u01bc\u01cb\u01ce\u01d3")
        buf.write("\u01d6\u01e1\u01e5\u01ea\u01f5\u01fb\u0204\u0206\u020f")
        buf.write("\u0213\u0219\u021c\u021f\u0224\u022a\u022d\u0235\u0238")
        buf.write("\u023d\u0242\u0249\u024e\u0251\u0256\u025d\u0264\u026d")
        buf.write("\u0271\u0276\u027b\u0281\u0285\u0294\u0297\u029c\u02ad")
        buf.write("\u02b0\u02b9\u02c1\u02c5\u02c7\u02cc\u02d0\u02d7\u02de")
        buf.write("\u030e\u034e\u0352\u035f\u0361\u0367\u036f\u0372\u0375")
        buf.write("\u037b\u037f\u0383\u0388\u038e\u0393\u0396\u039a\u03a5")
        buf.write("\u03ab\u03b5\u03c5\u03cc\u03fc\u0404")
        return buf.getvalue()


class JavaScriptParser ( JavaScriptParserBase ):

    grammarFileName = "JavaScriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'['", "']'", "'('", "')'", "'{'", "<INVALID>", 
                     "'}'", "';'", "','", "'='", "'?'", "':'", "'...'", 
                     "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                     "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
                     "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
                     "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", 
                     "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", 
                     "'=>'", "'null'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'break'", "'do'", 
                     "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", 
                     "'var'", "'catch'", "'finally'", "'return'", "'void'", 
                     "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
                     "'function'", "'this'", "'with'", "'default'", "'if'", 
                     "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", 
                     "'class'", "'enum'", "'extends'", "'super'", "'const'", 
                     "'export'", "'import'", "'async'", "'await'", "'implements'", 
                     "<INVALID>", "<INVALID>", "'private'", "'public'", 
                     "'interface'", "'package'", "'protected'", "'static'", 
                     "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'${'" ]

    symbolicNames = [ "<INVALID>", "HashBangLine", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "OpenBracket", "CloseBracket", 
                      "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", 
                      "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
                      "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                      "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
                      "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                      "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function_", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "Class", "Enum", 
                      "Extends", "Super", "Const", "Export", "Import", "Async", 
                      "Await", "Implements", "StrictLet", "NonStrictLet", 
                      "Private", "Public", "Interface", "Package", "Protected", 
                      "Static", "Yield", "Identifier", "StringLiteral", 
                      "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", 
                      "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", 
                      "TemplateStringAtom" ]

    RULE_program = 0
    RULE_sourceElement = 1
    RULE_statement = 2
    RULE_block = 3
    RULE_statementList = 4
    RULE_importStatement = 5
    RULE_importFromBlock = 6
    RULE_moduleItems = 7
    RULE_importDefault = 8
    RULE_importNamespace = 9
    RULE_importFrom = 10
    RULE_aliasName = 11
    RULE_exportStatement = 12
    RULE_exportFromBlock = 13
    RULE_declaration = 14
    RULE_variableStatement = 15
    RULE_variableDeclarationList = 16
    RULE_variableDeclaration = 17
    RULE_emptyStatement = 18
    RULE_expressionStatement = 19
    RULE_ifStatement = 20
    RULE_iterationStatement = 21
    RULE_varModifier = 22
    RULE_continueStatement = 23
    RULE_breakStatement = 24
    RULE_returnStatement = 25
    RULE_yieldStatement = 26
    RULE_withStatement = 27
    RULE_switchStatement = 28
    RULE_caseBlock = 29
    RULE_caseClauses = 30
    RULE_caseClause = 31
    RULE_defaultClause = 32
    RULE_labelledStatement = 33
    RULE_throwStatement = 34
    RULE_tryStatement = 35
    RULE_catchProduction = 36
    RULE_finallyProduction = 37
    RULE_debuggerStatement = 38
    RULE_functionDeclaration = 39
    RULE_classDeclaration = 40
    RULE_classTail = 41
    RULE_classElement = 42
    RULE_methodDefinition = 43
    RULE_formalParameterList = 44
    RULE_formalParameterArg = 45
    RULE_lastFormalParameterArg = 46
    RULE_functionBody = 47
    RULE_sourceElements = 48
    RULE_arrayLiteral = 49
    RULE_elementList = 50
    RULE_arrayElement = 51
    RULE_propertyAssignment = 52
    RULE_propertyName = 53
    RULE_arguments = 54
    RULE_argument = 55
    RULE_expressionSequence = 56
    RULE_singleExpression = 57
    RULE_assignable = 58
    RULE_objectLiteral = 59
    RULE_anonymousFunction = 60
    RULE_arrowFunctionParameters = 61
    RULE_arrowFunctionBody = 62
    RULE_assignmentOperator = 63
    RULE_literal = 64
    RULE_templateStringLiteral = 65
    RULE_templateStringAtom = 66
    RULE_numericLiteral = 67
    RULE_bigintLiteral = 68
    RULE_getter = 69
    RULE_setter = 70
    RULE_identifierName = 71
    RULE_identifier = 72
    RULE_reservedWord = 73
    RULE_keyword = 74
    RULE_let_ = 75
    RULE_eos = 76

    ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "importStatement", "importFromBlock", "moduleItems", 
                   "importDefault", "importNamespace", "importFrom", "aliasName", 
                   "exportStatement", "exportFromBlock", "declaration", 
                   "variableStatement", "variableDeclarationList", "variableDeclaration", 
                   "emptyStatement", "expressionStatement", "ifStatement", 
                   "iterationStatement", "varModifier", "continueStatement", 
                   "breakStatement", "returnStatement", "yieldStatement", 
                   "withStatement", "switchStatement", "caseBlock", "caseClauses", 
                   "caseClause", "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classElement", "methodDefinition", "formalParameterList", 
                   "formalParameterArg", "lastFormalParameterArg", "functionBody", 
                   "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
                   "propertyAssignment", "propertyName", "arguments", "argument", 
                   "expressionSequence", "singleExpression", "assignable", 
                   "objectLiteral", "anonymousFunction", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "templateStringLiteral", "templateStringAtom", "numericLiteral", 
                   "bigintLiteral", "getter", "setter", "identifierName", 
                   "identifier", "reservedWord", "keyword", "let_", "eos" ]

    EOF = Token.EOF
    HashBangLine=1
    MultiLineComment=2
    SingleLineComment=3
    RegularExpressionLiteral=4
    OpenBracket=5
    CloseBracket=6
    OpenParen=7
    CloseParen=8
    OpenBrace=9
    TemplateCloseBrace=10
    CloseBrace=11
    SemiColon=12
    Comma=13
    Assign=14
    QuestionMark=15
    Colon=16
    Ellipsis=17
    Dot=18
    PlusPlus=19
    MinusMinus=20
    Plus=21
    Minus=22
    BitNot=23
    Not=24
    Multiply=25
    Divide=26
    Modulus=27
    Power=28
    NullCoalesce=29
    Hashtag=30
    RightShiftArithmetic=31
    LeftShiftArithmetic=32
    RightShiftLogical=33
    LessThan=34
    MoreThan=35
    LessThanEquals=36
    GreaterThanEquals=37
    Equals_=38
    NotEquals=39
    IdentityEquals=40
    IdentityNotEquals=41
    BitAnd=42
    BitXOr=43
    BitOr=44
    And=45
    Or=46
    MultiplyAssign=47
    DivideAssign=48
    ModulusAssign=49
    PlusAssign=50
    MinusAssign=51
    LeftShiftArithmeticAssign=52
    RightShiftArithmeticAssign=53
    RightShiftLogicalAssign=54
    BitAndAssign=55
    BitXorAssign=56
    BitOrAssign=57
    PowerAssign=58
    ARROW=59
    NullLiteral=60
    BooleanLiteral=61
    DecimalLiteral=62
    HexIntegerLiteral=63
    OctalIntegerLiteral=64
    OctalIntegerLiteral2=65
    BinaryIntegerLiteral=66
    BigHexIntegerLiteral=67
    BigOctalIntegerLiteral=68
    BigBinaryIntegerLiteral=69
    BigDecimalIntegerLiteral=70
    Break=71
    Do=72
    Instanceof=73
    Typeof=74
    Case=75
    Else=76
    New=77
    Var=78
    Catch=79
    Finally=80
    Return=81
    Void=82
    Continue=83
    For=84
    Switch=85
    While=86
    Debugger=87
    Function_=88
    This=89
    With=90
    Default=91
    If=92
    Throw=93
    Delete=94
    In=95
    Try=96
    As=97
    From=98
    Class=99
    Enum=100
    Extends=101
    Super=102
    Const=103
    Export=104
    Import=105
    Async=106
    Await=107
    Implements=108
    StrictLet=109
    NonStrictLet=110
    Private=111
    Public=112
    Interface=113
    Package=114
    Protected=115
    Static=116
    Yield=117
    Identifier=118
    StringLiteral=119
    BackTick=120
    WhiteSpaces=121
    LineTerminator=122
    HtmlComment=123
    CDataComment=124
    UnexpectedCharacter=125
    TemplateStringStartExpression=126
    TemplateStringAtom=127

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaScriptParser.EOF, 0)

        def HashBangLine(self):
            return self.getToken(JavaScriptParser.HashBangLine, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(JavaScriptParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = JavaScriptParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 154
                self.match(JavaScriptParser.HashBangLine)


            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 157
                self.sourceElements()


            self.state = 160
            self.match(JavaScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_sourceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElement" ):
                listener.enterSourceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElement" ):
                listener.exitSourceElement(self)




    def sourceElement(self):

        localctx = JavaScriptParser.SourceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sourceElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext,0)


        def variableStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ExportStatementContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.EmptyStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassDeclarationContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.IfStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.IterationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.YieldStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.WithStatementContext,0)


        def labelledStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.LabelledStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.SwitchStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.TryStatementContext,0)


        def debuggerStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.DebuggerStatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaScriptParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.variableStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.importStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.exportStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 168
                self.emptyStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 169
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 170
                self.expressionStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 171
                self.ifStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 172
                self.iterationStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 173
                self.continueStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 174
                self.breakStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 175
                self.returnStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 176
                self.yieldStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 177
                self.withStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 178
                self.labelledStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 179
                self.switchStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 180
                self.throwStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 181
                self.tryStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 182
                self.debuggerStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 183
                self.functionDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaScriptParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(JavaScriptParser.OpenBrace)
            self.state = 188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 187
                self.statementList()


            self.state = 190
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.StatementContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)




    def statementList(self):

        localctx = JavaScriptParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 192
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 195 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)

        def importFromBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromBlockContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = JavaScriptParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(JavaScriptParser.Import)
            self.state = 198
            self.importFromBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportFromBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importFrom(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def importNamespace(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportNamespaceContext,0)


        def moduleItems(self):
            return self.getTypedRuleContext(JavaScriptParser.ModuleItemsContext,0)


        def importDefault(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportDefaultContext,0)


        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFromBlock" ):
                listener.enterImportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFromBlock" ):
                listener.exitImportFromBlock(self)




    def importFromBlock(self):

        localctx = JavaScriptParser.ImportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importFromBlock)
        try:
            self.state = 212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.OpenBrace, JavaScriptParser.Multiply, JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.importDefault()


                self.state = 205
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaScriptParser.Multiply, JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                    self.state = 203
                    self.importNamespace()
                    pass
                elif token in [JavaScriptParser.OpenBrace]:
                    self.state = 204
                    self.moduleItems()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 207
                self.importFrom()
                self.state = 208
                self.eos()
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(JavaScriptParser.StringLiteral)
                self.state = 211
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def aliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.AliasNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.AliasNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_moduleItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleItems" ):
                listener.enterModuleItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleItems" ):
                listener.exitModuleItems(self)




    def moduleItems(self):

        localctx = JavaScriptParser.ModuleItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(JavaScriptParser.OpenBrace)
            self.state = 220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 215
                    self.aliasName()
                    self.state = 216
                    self.match(JavaScriptParser.Comma) 
                self.state = 222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & ((1 << (JavaScriptParser.NullLiteral - 60)) | (1 << (JavaScriptParser.BooleanLiteral - 60)) | (1 << (JavaScriptParser.Break - 60)) | (1 << (JavaScriptParser.Do - 60)) | (1 << (JavaScriptParser.Instanceof - 60)) | (1 << (JavaScriptParser.Typeof - 60)) | (1 << (JavaScriptParser.Case - 60)) | (1 << (JavaScriptParser.Else - 60)) | (1 << (JavaScriptParser.New - 60)) | (1 << (JavaScriptParser.Var - 60)) | (1 << (JavaScriptParser.Catch - 60)) | (1 << (JavaScriptParser.Finally - 60)) | (1 << (JavaScriptParser.Return - 60)) | (1 << (JavaScriptParser.Void - 60)) | (1 << (JavaScriptParser.Continue - 60)) | (1 << (JavaScriptParser.For - 60)) | (1 << (JavaScriptParser.Switch - 60)) | (1 << (JavaScriptParser.While - 60)) | (1 << (JavaScriptParser.Debugger - 60)) | (1 << (JavaScriptParser.Function_ - 60)) | (1 << (JavaScriptParser.This - 60)) | (1 << (JavaScriptParser.With - 60)) | (1 << (JavaScriptParser.Default - 60)) | (1 << (JavaScriptParser.If - 60)) | (1 << (JavaScriptParser.Throw - 60)) | (1 << (JavaScriptParser.Delete - 60)) | (1 << (JavaScriptParser.In - 60)) | (1 << (JavaScriptParser.Try - 60)) | (1 << (JavaScriptParser.As - 60)) | (1 << (JavaScriptParser.From - 60)) | (1 << (JavaScriptParser.Class - 60)) | (1 << (JavaScriptParser.Enum - 60)) | (1 << (JavaScriptParser.Extends - 60)) | (1 << (JavaScriptParser.Super - 60)) | (1 << (JavaScriptParser.Const - 60)) | (1 << (JavaScriptParser.Export - 60)) | (1 << (JavaScriptParser.Import - 60)) | (1 << (JavaScriptParser.Async - 60)) | (1 << (JavaScriptParser.Await - 60)) | (1 << (JavaScriptParser.Implements - 60)) | (1 << (JavaScriptParser.StrictLet - 60)) | (1 << (JavaScriptParser.NonStrictLet - 60)) | (1 << (JavaScriptParser.Private - 60)) | (1 << (JavaScriptParser.Public - 60)) | (1 << (JavaScriptParser.Interface - 60)) | (1 << (JavaScriptParser.Package - 60)) | (1 << (JavaScriptParser.Protected - 60)) | (1 << (JavaScriptParser.Static - 60)) | (1 << (JavaScriptParser.Yield - 60)) | (1 << (JavaScriptParser.Identifier - 60)))) != 0):
                self.state = 223
                self.aliasName()
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Comma:
                    self.state = 224
                    self.match(JavaScriptParser.Comma)




            self.state = 229
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasName(self):
            return self.getTypedRuleContext(JavaScriptParser.AliasNameContext,0)


        def Comma(self):
            return self.getToken(JavaScriptParser.Comma, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDefault" ):
                listener.enterImportDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDefault" ):
                listener.exitImportDefault(self)




    def importDefault(self):

        localctx = JavaScriptParser.ImportDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.aliasName()
            self.state = 232
            self.match(JavaScriptParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext,i)


        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportNamespace" ):
                listener.enterImportNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportNamespace" ):
                listener.exitImportNamespace(self)




    def importNamespace(self):

        localctx = JavaScriptParser.ImportNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Multiply]:
                self.state = 234
                self.match(JavaScriptParser.Multiply)
                pass
            elif token in [JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.state = 235
                self.identifierName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.As:
                self.state = 238
                self.match(JavaScriptParser.As)
                self.state = 239
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def From(self):
            return self.getToken(JavaScriptParser.From, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFrom" ):
                listener.enterImportFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFrom" ):
                listener.exitImportFrom(self)




    def importFrom(self):

        localctx = JavaScriptParser.ImportFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(JavaScriptParser.From)
            self.state = 243
            self.match(JavaScriptParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext,i)


        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_aliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasName" ):
                listener.enterAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasName" ):
                listener.exitAliasName(self)




    def aliasName(self):

        localctx = JavaScriptParser.AliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_aliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.identifierName()
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.As:
                self.state = 246
                self.match(JavaScriptParser.As)
                self.state = 247
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaScriptParser.RULE_exportStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExportDefaultDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)
        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDefaultDeclaration" ):
                listener.enterExportDefaultDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDefaultDeclaration" ):
                listener.exitExportDefaultDeclaration(self)


    class ExportDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)
        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)

        def exportFromBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.ExportFromBlockContext,0)

        def declaration(self):
            return self.getTypedRuleContext(JavaScriptParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDeclaration" ):
                listener.enterExportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDeclaration" ):
                listener.exitExportDeclaration(self)



    def exportStatement(self):

        localctx = JavaScriptParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_exportStatement)
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.ExportDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.match(JavaScriptParser.Export)
                self.state = 253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 251
                    self.exportFromBlock()
                    pass

                elif la_ == 2:
                    self.state = 252
                    self.declaration()
                    pass


                self.state = 255
                self.eos()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ExportDefaultDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.match(JavaScriptParser.Export)
                self.state = 258
                self.match(JavaScriptParser.Default)
                self.state = 259
                self.singleExpression(0)
                self.state = 260
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportFromBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importNamespace(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportNamespaceContext,0)


        def importFrom(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def moduleItems(self):
            return self.getTypedRuleContext(JavaScriptParser.ModuleItemsContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_exportFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportFromBlock" ):
                listener.enterExportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportFromBlock" ):
                listener.exitExportFromBlock(self)




    def exportFromBlock(self):

        localctx = JavaScriptParser.ExportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_exportFromBlock)
        try:
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Multiply, JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.importNamespace()
                self.state = 265
                self.importFrom()
                self.state = 266
                self.eos()
                pass
            elif token in [JavaScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.moduleItems()
                self.state = 270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 269
                    self.importFrom()


                self.state = 272
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = JavaScriptParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_declaration)
        try:
            self.state = 279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Var, JavaScriptParser.Const, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.variableStatement()
                pass
            elif token in [JavaScriptParser.Class]:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.classDeclaration()
                pass
            elif token in [JavaScriptParser.Function_, JavaScriptParser.Async]:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.functionDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext,0)


        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStatement" ):
                listener.enterVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStatement" ):
                listener.exitVariableStatement(self)




    def variableStatement(self):

        localctx = JavaScriptParser.VariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_variableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.variableDeclarationList()
            self.state = 282
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varModifier(self):
            return self.getTypedRuleContext(JavaScriptParser.VarModifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = JavaScriptParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_variableDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.varModifier()
            self.state = 285
            self.variableDeclaration()
            self.state = 290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 286
                    self.match(JavaScriptParser.Comma)
                    self.state = 287
                    self.variableDeclaration() 
                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(JavaScriptParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = JavaScriptParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.assignable()
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 294
                self.match(JavaScriptParser.Assign)
                self.state = 295
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(JavaScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = JavaScriptParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(JavaScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = JavaScriptParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            if not self.notOpenBraceAndNotFunction():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notOpenBraceAndNotFunction()")
            self.state = 301
            self.expressionSequence()
            self.state = 302
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(JavaScriptParser.If, 0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.StatementContext,i)


        def Else(self):
            return self.getToken(JavaScriptParser.Else, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = JavaScriptParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(JavaScriptParser.If)
            self.state = 305
            self.match(JavaScriptParser.OpenParen)
            self.state = 306
            self.expressionSequence()
            self.state = 307
            self.match(JavaScriptParser.CloseParen)
            self.state = 308
            self.statement()
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 309
                self.match(JavaScriptParser.Else)
                self.state = 310
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaScriptParser.RULE_iterationStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DoStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(JavaScriptParser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)


    class WhileStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class ForStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.SemiColon)
            else:
                return self.getToken(JavaScriptParser.SemiColon, i)
        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)

        def expressionSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,i)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)


    class ForInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def In(self):
            return self.getToken(JavaScriptParser.In, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)


    class ForOfStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext,0)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForOfStatement" ):
                listener.enterForOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForOfStatement" ):
                listener.exitForOfStatement(self)



    def iterationStatement(self):

        localctx = JavaScriptParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.match(JavaScriptParser.Do)
                self.state = 314
                self.statement()
                self.state = 315
                self.match(JavaScriptParser.While)
                self.state = 316
                self.match(JavaScriptParser.OpenParen)
                self.state = 317
                self.expressionSequence()
                self.state = 318
                self.match(JavaScriptParser.CloseParen)
                self.state = 319
                self.eos()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(JavaScriptParser.While)
                self.state = 322
                self.match(JavaScriptParser.OpenParen)
                self.state = 323
                self.expressionSequence()
                self.state = 324
                self.match(JavaScriptParser.CloseParen)
                self.state = 325
                self.statement()
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 327
                self.match(JavaScriptParser.For)
                self.state = 328
                self.match(JavaScriptParser.OpenParen)
                self.state = 331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 329
                    self.expressionSequence()

                elif la_ == 2:
                    self.state = 330
                    self.variableDeclarationList()


                self.state = 333
                self.match(JavaScriptParser.SemiColon)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (1 << (JavaScriptParser.Typeof - 64)) | (1 << (JavaScriptParser.New - 64)) | (1 << (JavaScriptParser.Void - 64)) | (1 << (JavaScriptParser.Function_ - 64)) | (1 << (JavaScriptParser.This - 64)) | (1 << (JavaScriptParser.Delete - 64)) | (1 << (JavaScriptParser.Class - 64)) | (1 << (JavaScriptParser.Super - 64)) | (1 << (JavaScriptParser.Import - 64)) | (1 << (JavaScriptParser.Async - 64)) | (1 << (JavaScriptParser.Await - 64)) | (1 << (JavaScriptParser.NonStrictLet - 64)) | (1 << (JavaScriptParser.Yield - 64)) | (1 << (JavaScriptParser.Identifier - 64)) | (1 << (JavaScriptParser.StringLiteral - 64)) | (1 << (JavaScriptParser.BackTick - 64)))) != 0):
                    self.state = 334
                    self.expressionSequence()


                self.state = 337
                self.match(JavaScriptParser.SemiColon)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (1 << (JavaScriptParser.Typeof - 64)) | (1 << (JavaScriptParser.New - 64)) | (1 << (JavaScriptParser.Void - 64)) | (1 << (JavaScriptParser.Function_ - 64)) | (1 << (JavaScriptParser.This - 64)) | (1 << (JavaScriptParser.Delete - 64)) | (1 << (JavaScriptParser.Class - 64)) | (1 << (JavaScriptParser.Super - 64)) | (1 << (JavaScriptParser.Import - 64)) | (1 << (JavaScriptParser.Async - 64)) | (1 << (JavaScriptParser.Await - 64)) | (1 << (JavaScriptParser.NonStrictLet - 64)) | (1 << (JavaScriptParser.Yield - 64)) | (1 << (JavaScriptParser.Identifier - 64)) | (1 << (JavaScriptParser.StringLiteral - 64)) | (1 << (JavaScriptParser.BackTick - 64)))) != 0):
                    self.state = 338
                    self.expressionSequence()


                self.state = 341
                self.match(JavaScriptParser.CloseParen)
                self.state = 342
                self.statement()
                pass

            elif la_ == 4:
                localctx = JavaScriptParser.ForInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 343
                self.match(JavaScriptParser.For)
                self.state = 344
                self.match(JavaScriptParser.OpenParen)
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 345
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 346
                    self.variableDeclarationList()
                    pass


                self.state = 349
                self.match(JavaScriptParser.In)
                self.state = 350
                self.expressionSequence()
                self.state = 351
                self.match(JavaScriptParser.CloseParen)
                self.state = 352
                self.statement()
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.ForOfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 354
                self.match(JavaScriptParser.For)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Await:
                    self.state = 355
                    self.match(JavaScriptParser.Await)


                self.state = 358
                self.match(JavaScriptParser.OpenParen)
                self.state = 361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 359
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 360
                    self.variableDeclarationList()
                    pass


                self.state = 363
                self.identifier()
                self.state = 364
                if not self.p("of"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.p(\"of\")")
                self.state = 365
                self.expressionSequence()
                self.state = 366
                self.match(JavaScriptParser.CloseParen)
                self.state = 367
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(JavaScriptParser.Var, 0)

        def let_(self):
            return self.getTypedRuleContext(JavaScriptParser.Let_Context,0)


        def Const(self):
            return self.getToken(JavaScriptParser.Const, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_varModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarModifier" ):
                listener.enterVarModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarModifier" ):
                listener.exitVarModifier(self)




    def varModifier(self):

        localctx = JavaScriptParser.VarModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_varModifier)
        try:
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Var]:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self.match(JavaScriptParser.Var)
                pass
            elif token in [JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 2)
                self.state = 372
                self.let_()
                pass
            elif token in [JavaScriptParser.Const]:
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self.match(JavaScriptParser.Const)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(JavaScriptParser.Continue, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = JavaScriptParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(JavaScriptParser.Continue)
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 377
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 378
                self.identifier()


            self.state = 381
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(JavaScriptParser.Break, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = JavaScriptParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(JavaScriptParser.Break)
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 384
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 385
                self.identifier()


            self.state = 388
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(JavaScriptParser.Return, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = JavaScriptParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(JavaScriptParser.Return)
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 391
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 392
                self.expressionSequence()


            self.state = 395
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(JavaScriptParser.Yield, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)




    def yieldStatement(self):

        localctx = JavaScriptParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(JavaScriptParser.Yield)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 398
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 399
                self.expressionSequence()


            self.state = 402
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def With(self):
            return self.getToken(JavaScriptParser.With, 0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)




    def withStatement(self):

        localctx = JavaScriptParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_withStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(JavaScriptParser.With)
            self.state = 405
            self.match(JavaScriptParser.OpenParen)
            self.state = 406
            self.expressionSequence()
            self.state = 407
            self.match(JavaScriptParser.CloseParen)
            self.state = 408
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(JavaScriptParser.Switch, 0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.CaseBlockContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = JavaScriptParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(JavaScriptParser.Switch)
            self.state = 411
            self.match(JavaScriptParser.OpenParen)
            self.state = 412
            self.expressionSequence()
            self.state = 413
            self.match(JavaScriptParser.CloseParen)
            self.state = 414
            self.caseBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def caseClauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.CaseClausesContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.CaseClausesContext,i)


        def defaultClause(self):
            return self.getTypedRuleContext(JavaScriptParser.DefaultClauseContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBlock" ):
                listener.enterCaseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBlock" ):
                listener.exitCaseBlock(self)




    def caseBlock(self):

        localctx = JavaScriptParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_caseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(JavaScriptParser.OpenBrace)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Case:
                self.state = 417
                self.caseClauses()


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Default:
                self.state = 420
                self.defaultClause()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Case:
                    self.state = 421
                    self.caseClauses()




            self.state = 426
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.CaseClauseContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClauses" ):
                listener.enterCaseClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClauses" ):
                listener.exitCaseClauses(self)




    def caseClauses(self):

        localctx = JavaScriptParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_caseClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 428
                self.caseClause()
                self.state = 431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaScriptParser.Case):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(JavaScriptParser.Case, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)




    def caseClause(self):

        localctx = JavaScriptParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_caseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(JavaScriptParser.Case)
            self.state = 434
            self.expressionSequence()
            self.state = 435
            self.match(JavaScriptParser.Colon)
            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 436
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)

        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_defaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultClause" ):
                listener.enterDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultClause" ):
                listener.exitDefaultClause(self)




    def defaultClause(self):

        localctx = JavaScriptParser.DefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_defaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(JavaScriptParser.Default)
            self.state = 440
            self.match(JavaScriptParser.Colon)
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 441
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_labelledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelledStatement" ):
                listener.enterLabelledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelledStatement" ):
                listener.exitLabelledStatement(self)




    def labelledStatement(self):

        localctx = JavaScriptParser.LabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_labelledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.identifier()
            self.state = 445
            self.match(JavaScriptParser.Colon)
            self.state = 446
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(JavaScriptParser.Throw, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = JavaScriptParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(JavaScriptParser.Throw)
            self.state = 449
            if not self.notLineTerminator():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notLineTerminator()")
            self.state = 450
            self.expressionSequence()
            self.state = 451
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(JavaScriptParser.Try, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(JavaScriptParser.CatchProductionContext,0)


        def finallyProduction(self):
            return self.getTypedRuleContext(JavaScriptParser.FinallyProductionContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = JavaScriptParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(JavaScriptParser.Try)
            self.state = 454
            self.block()
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Catch]:
                self.state = 455
                self.catchProduction()
                self.state = 457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.finallyProduction()


                pass
            elif token in [JavaScriptParser.Finally]:
                self.state = 459
                self.finallyProduction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(JavaScriptParser.Catch, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext,0)


        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)




    def catchProduction(self):

        localctx = JavaScriptParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_catchProduction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(JavaScriptParser.Catch)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.OpenParen:
                self.state = 463
                self.match(JavaScriptParser.OpenParen)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.OpenBracket or _la==JavaScriptParser.OpenBrace or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 464
                    self.assignable()


                self.state = 467
                self.match(JavaScriptParser.CloseParen)


            self.state = 470
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyProductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(JavaScriptParser.Finally, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_finallyProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyProduction" ):
                listener.enterFinallyProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyProduction" ):
                listener.exitFinallyProduction(self)




    def finallyProduction(self):

        localctx = JavaScriptParser.FinallyProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_finallyProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(JavaScriptParser.Finally)
            self.state = 473
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebuggerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Debugger(self):
            return self.getToken(JavaScriptParser.Debugger, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_debuggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebuggerStatement" ):
                listener.enterDebuggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebuggerStatement" ):
                listener.exitDebuggerStatement(self)




    def debuggerStatement(self):

        localctx = JavaScriptParser.DebuggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_debuggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(JavaScriptParser.Debugger)
            self.state = 476
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(JavaScriptParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)


        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = JavaScriptParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Async:
                self.state = 478
                self.match(JavaScriptParser.Async)


            self.state = 481
            self.match(JavaScriptParser.Function_)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Multiply:
                self.state = 482
                self.match(JavaScriptParser.Multiply)


            self.state = 485
            self.identifier()
            self.state = 486
            self.match(JavaScriptParser.OpenParen)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                self.state = 487
                self.formalParameterList()


            self.state = 490
            self.match(JavaScriptParser.CloseParen)
            self.state = 491
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def classTail(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassTailContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaScriptParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(JavaScriptParser.Class)
            self.state = 494
            self.identifier()
            self.state = 495
            self.classTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def Extends(self):
            return self.getToken(JavaScriptParser.Extends, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def classElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ClassElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ClassElementContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_classTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTail" ):
                listener.enterClassTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTail" ):
                listener.exitClassTail(self)




    def classTail(self):

        localctx = JavaScriptParser.ClassTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Extends:
                self.state = 497
                self.match(JavaScriptParser.Extends)
                self.state = 498
                self.singleExpression(0)


            self.state = 501
            self.match(JavaScriptParser.OpenBrace)
            self.state = 505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 502
                    self.classElement() 
                self.state = 507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 508
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDefinition(self):
            return self.getTypedRuleContext(JavaScriptParser.MethodDefinitionContext,0)


        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(JavaScriptParser.Assign, 0)

        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext,0)


        def SemiColon(self):
            return self.getToken(JavaScriptParser.SemiColon, 0)

        def Static(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Static)
            else:
                return self.getToken(JavaScriptParser.Static, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,i)


        def Async(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Async)
            else:
                return self.getToken(JavaScriptParser.Async, i)

        def emptyStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.EmptyStatementContext,0)


        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)


        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def Hashtag(self):
            return self.getToken(JavaScriptParser.Hashtag, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_classElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassElement" ):
                listener.enterClassElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassElement" ):
                listener.exitClassElement(self)




    def classElement(self):

        localctx = JavaScriptParser.ClassElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classElement)
        self._la = 0 # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 514
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                        if la_ == 1:
                            self.state = 510
                            self.match(JavaScriptParser.Static)
                            pass

                        elif la_ == 2:
                            self.state = 511
                            if not self.n("static"):
                                from antlr4.error.Errors import FailedPredicateException
                                raise FailedPredicateException(self, "self.n(\"static\")")
                            self.state = 512
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 513
                            self.match(JavaScriptParser.Async)
                            pass

                 
                    self.state = 518
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 519
                    self.methodDefinition()
                    pass

                elif la_ == 2:
                    self.state = 520
                    self.assignable()
                    self.state = 521
                    self.match(JavaScriptParser.Assign)
                    self.state = 522
                    self.objectLiteral()
                    self.state = 523
                    self.match(JavaScriptParser.SemiColon)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.emptyStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Hashtag:
                    self.state = 528
                    self.match(JavaScriptParser.Hashtag)


                self.state = 531
                self.propertyName()
                self.state = 532
                self.match(JavaScriptParser.Assign)
                self.state = 533
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)


        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)


        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)

        def Hashtag(self):
            return self.getToken(JavaScriptParser.Hashtag, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext,0)


        def getter(self):
            return self.getTypedRuleContext(JavaScriptParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(JavaScriptParser.SetterContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)




    def methodDefinition(self):

        localctx = JavaScriptParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Multiply:
                    self.state = 537
                    self.match(JavaScriptParser.Multiply)


                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Hashtag:
                    self.state = 540
                    self.match(JavaScriptParser.Hashtag)


                self.state = 543
                self.propertyName()
                self.state = 544
                self.match(JavaScriptParser.OpenParen)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 545
                    self.formalParameterList()


                self.state = 548
                self.match(JavaScriptParser.CloseParen)
                self.state = 549
                self.functionBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.match(JavaScriptParser.Multiply)


                self.state = 555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 554
                    self.match(JavaScriptParser.Hashtag)


                self.state = 557
                self.getter()
                self.state = 558
                self.match(JavaScriptParser.OpenParen)
                self.state = 559
                self.match(JavaScriptParser.CloseParen)
                self.state = 560
                self.functionBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 562
                    self.match(JavaScriptParser.Multiply)


                self.state = 566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 565
                    self.match(JavaScriptParser.Hashtag)


                self.state = 568
                self.setter()
                self.state = 569
                self.match(JavaScriptParser.OpenParen)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 570
                    self.formalParameterList()


                self.state = 573
                self.match(JavaScriptParser.CloseParen)
                self.state = 574
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.FormalParameterArgContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.FormalParameterArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def lastFormalParameterArg(self):
            return self.getTypedRuleContext(JavaScriptParser.LastFormalParameterArgContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaScriptParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.OpenBracket, JavaScriptParser.OpenBrace, JavaScriptParser.Async, JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.formalParameterArg()
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 579
                        self.match(JavaScriptParser.Comma)
                        self.state = 580
                        self.formalParameterArg() 
                    self.state = 585
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Comma:
                    self.state = 586
                    self.match(JavaScriptParser.Comma)
                    self.state = 587
                    self.lastFormalParameterArg()


                pass
            elif token in [JavaScriptParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.lastFormalParameterArg()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(JavaScriptParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_formalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterArg" ):
                listener.enterFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterArg" ):
                listener.exitFormalParameterArg(self)




    def formalParameterArg(self):

        localctx = JavaScriptParser.FormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameterArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.assignable()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Assign:
                self.state = 594
                self.match(JavaScriptParser.Assign)
                self.state = 595
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_lastFormalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameterArg" ):
                listener.enterLastFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameterArg" ):
                listener.exitLastFormalParameterArg(self)




    def lastFormalParameterArg(self):

        localctx = JavaScriptParser.LastFormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lastFormalParameterArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(JavaScriptParser.Ellipsis)
            self.state = 599
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(JavaScriptParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = JavaScriptParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(JavaScriptParser.OpenBrace)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 602
                self.sourceElements()


            self.state = 605
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SourceElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SourceElementContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_sourceElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElements" ):
                listener.enterSourceElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElements" ):
                listener.exitSourceElements(self)




    def sourceElements(self):

        localctx = JavaScriptParser.SourceElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_sourceElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 607
                    self.sourceElement()

                else:
                    raise NoViableAltException(self)
                self.state = 610 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(JavaScriptParser.OpenBracket, 0)

        def elementList(self):
            return self.getTypedRuleContext(JavaScriptParser.ElementListContext,0)


        def CloseBracket(self):
            return self.getToken(JavaScriptParser.CloseBracket, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = JavaScriptParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_arrayLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(JavaScriptParser.OpenBracket)
            self.state = 613
            self.elementList()
            self.state = 614
            self.match(JavaScriptParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def arrayElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ArrayElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ArrayElementContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)




    def elementList(self):

        localctx = JavaScriptParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.match(JavaScriptParser.Comma) 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (1 << (JavaScriptParser.Typeof - 64)) | (1 << (JavaScriptParser.New - 64)) | (1 << (JavaScriptParser.Void - 64)) | (1 << (JavaScriptParser.Function_ - 64)) | (1 << (JavaScriptParser.This - 64)) | (1 << (JavaScriptParser.Delete - 64)) | (1 << (JavaScriptParser.Class - 64)) | (1 << (JavaScriptParser.Super - 64)) | (1 << (JavaScriptParser.Import - 64)) | (1 << (JavaScriptParser.Async - 64)) | (1 << (JavaScriptParser.Await - 64)) | (1 << (JavaScriptParser.NonStrictLet - 64)) | (1 << (JavaScriptParser.Yield - 64)) | (1 << (JavaScriptParser.Identifier - 64)) | (1 << (JavaScriptParser.StringLiteral - 64)) | (1 << (JavaScriptParser.BackTick - 64)))) != 0):
                self.state = 622
                self.arrayElement()


            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 626 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 625
                        self.match(JavaScriptParser.Comma)
                        self.state = 628 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==JavaScriptParser.Comma):
                            break

                    self.state = 630
                    self.arrayElement() 
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaScriptParser.Comma:
                self.state = 636
                self.match(JavaScriptParser.Comma)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrayElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElement" ):
                listener.enterArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElement" ):
                listener.exitArrayElement(self)




    def arrayElement(self):

        localctx = JavaScriptParser.ArrayElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Ellipsis:
                self.state = 642
                self.match(JavaScriptParser.Ellipsis)


            self.state = 645
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaScriptParser.RULE_propertyAssignment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)

        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyExpressionAssignment" ):
                listener.enterPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyExpressionAssignment" ):
                listener.exitPropertyExpressionAssignment(self)


    class ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenBracket(self):
            return self.getToken(JavaScriptParser.OpenBracket, 0)
        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def CloseBracket(self):
            return self.getToken(JavaScriptParser.CloseBracket, 0)
        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputedPropertyExpressionAssignment" ):
                listener.enterComputedPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputedPropertyExpressionAssignment" ):
                listener.exitComputedPropertyExpressionAssignment(self)


    class PropertyShorthandContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyShorthand" ):
                listener.enterPropertyShorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyShorthand" ):
                listener.exitPropertyShorthand(self)


    class PropertySetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setter(self):
            return self.getTypedRuleContext(JavaScriptParser.SetterContext,0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def formalParameterArg(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterArgContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetter" ):
                listener.enterPropertySetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetter" ):
                listener.exitPropertySetter(self)


    class PropertyGetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def getter(self):
            return self.getTypedRuleContext(JavaScriptParser.GetterContext,0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetter" ):
                listener.enterPropertyGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetter" ):
                listener.exitPropertyGetter(self)


    class FunctionPropertyContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)
        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionProperty" ):
                listener.enterFunctionProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionProperty" ):
                listener.exitFunctionProperty(self)



    def propertyAssignment(self):

        localctx = JavaScriptParser.PropertyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_propertyAssignment)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.PropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.propertyName()
                self.state = 648
                self.match(JavaScriptParser.Colon)
                self.state = 649
                self.singleExpression(0)
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ComputedPropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.match(JavaScriptParser.OpenBracket)
                self.state = 652
                self.singleExpression(0)
                self.state = 653
                self.match(JavaScriptParser.CloseBracket)
                self.state = 654
                self.match(JavaScriptParser.Colon)
                self.state = 655
                self.singleExpression(0)
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.FunctionPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 657
                    self.match(JavaScriptParser.Async)


                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Multiply:
                    self.state = 660
                    self.match(JavaScriptParser.Multiply)


                self.state = 663
                self.propertyName()
                self.state = 664
                self.match(JavaScriptParser.OpenParen)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 665
                    self.formalParameterList()


                self.state = 668
                self.match(JavaScriptParser.CloseParen)
                self.state = 669
                self.functionBody()
                pass

            elif la_ == 4:
                localctx = JavaScriptParser.PropertyGetterContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.getter()
                self.state = 672
                self.match(JavaScriptParser.OpenParen)
                self.state = 673
                self.match(JavaScriptParser.CloseParen)
                self.state = 674
                self.functionBody()
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.PropertySetterContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 676
                self.setter()
                self.state = 677
                self.match(JavaScriptParser.OpenParen)
                self.state = 678
                self.formalParameterArg()
                self.state = 679
                self.match(JavaScriptParser.CloseParen)
                self.state = 680
                self.functionBody()
                pass

            elif la_ == 6:
                localctx = JavaScriptParser.PropertyShorthandContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Ellipsis:
                    self.state = 682
                    self.match(JavaScriptParser.Ellipsis)


                self.state = 685
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext,0)


        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.NumericLiteralContext,0)


        def OpenBracket(self):
            return self.getToken(JavaScriptParser.OpenBracket, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def CloseBracket(self):
            return self.getToken(JavaScriptParser.CloseBracket, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyName" ):
                listener.enterPropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyName" ):
                listener.exitPropertyName(self)




    def propertyName(self):

        localctx = JavaScriptParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_propertyName)
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.identifierName()
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.match(JavaScriptParser.StringLiteral)
                pass
            elif token in [JavaScriptParser.DecimalLiteral, JavaScriptParser.HexIntegerLiteral, JavaScriptParser.OctalIntegerLiteral, JavaScriptParser.OctalIntegerLiteral2, JavaScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                self.numericLiteral()
                pass
            elif token in [JavaScriptParser.OpenBracket]:
                self.enterOuterAlt(localctx, 4)
                self.state = 691
                self.match(JavaScriptParser.OpenBracket)
                self.state = 692
                self.singleExpression(0)
                self.state = 693
                self.match(JavaScriptParser.CloseBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaScriptParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(JavaScriptParser.OpenParen)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (1 << (JavaScriptParser.Typeof - 64)) | (1 << (JavaScriptParser.New - 64)) | (1 << (JavaScriptParser.Void - 64)) | (1 << (JavaScriptParser.Function_ - 64)) | (1 << (JavaScriptParser.This - 64)) | (1 << (JavaScriptParser.Delete - 64)) | (1 << (JavaScriptParser.Class - 64)) | (1 << (JavaScriptParser.Super - 64)) | (1 << (JavaScriptParser.Import - 64)) | (1 << (JavaScriptParser.Async - 64)) | (1 << (JavaScriptParser.Await - 64)) | (1 << (JavaScriptParser.NonStrictLet - 64)) | (1 << (JavaScriptParser.Yield - 64)) | (1 << (JavaScriptParser.Identifier - 64)) | (1 << (JavaScriptParser.StringLiteral - 64)) | (1 << (JavaScriptParser.BackTick - 64)))) != 0):
                self.state = 698
                self.argument()
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 699
                        self.match(JavaScriptParser.Comma)
                        self.state = 700
                        self.argument() 
                    self.state = 705
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Comma:
                    self.state = 706
                    self.match(JavaScriptParser.Comma)




            self.state = 711
            self.match(JavaScriptParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = JavaScriptParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Ellipsis:
                self.state = 713
                self.match(JavaScriptParser.Ellipsis)


            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 716
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 717
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_expressionSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSequence" ):
                listener.enterExpressionSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSequence" ):
                listener.exitExpressionSequence(self)




    def expressionSequence(self):

        localctx = JavaScriptParser.ExpressionSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expressionSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.singleExpression(0)
            self.state = 725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 721
                    self.match(JavaScriptParser.Comma)
                    self.state = 722
                    self.singleExpression(0) 
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaScriptParser.RULE_singleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TemplateStringExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.TemplateStringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringExpression" ):
                listener.enterTemplateStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringExpression" ):
                listener.exitTemplateStringExpression(self)


    class TernaryExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def QuestionMark(self):
            return self.getToken(JavaScriptParser.QuestionMark, 0)
        def Colon(self):
            return self.getToken(JavaScriptParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class LogicalAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def And(self):
            return self.getToken(JavaScriptParser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)


    class PowerExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Power(self):
            return self.getToken(JavaScriptParser.Power, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)


    class PreIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(JavaScriptParser.PlusPlus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)


    class ObjectLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralExpression" ):
                listener.enterObjectLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralExpression" ):
                listener.exitObjectLiteralExpression(self)


    class MetaExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)
        def Dot(self):
            return self.getToken(JavaScriptParser.Dot, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetaExpression" ):
                listener.enterMetaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetaExpression" ):
                listener.exitMetaExpression(self)


    class InExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def In(self):
            return self.getToken(JavaScriptParser.In, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)


    class LogicalOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Or(self):
            return self.getToken(JavaScriptParser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)


    class NotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Not(self):
            return self.getToken(JavaScriptParser.Not, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class PreDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(JavaScriptParser.MinusMinus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecreaseExpression" ):
                listener.enterPreDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecreaseExpression" ):
                listener.exitPreDecreaseExpression(self)


    class ArgumentsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(JavaScriptParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsExpression" ):
                listener.enterArgumentsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsExpression" ):
                listener.exitArgumentsExpression(self)


    class AwaitExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwaitExpression" ):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwaitExpression" ):
                listener.exitAwaitExpression(self)


    class ThisExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(JavaScriptParser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)


    class FunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anonymousFunction(self):
            return self.getTypedRuleContext(JavaScriptParser.AnonymousFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)


    class UnaryMinusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(JavaScriptParser.Minus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)


    class AssignmentExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Assign(self):
            return self.getToken(JavaScriptParser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class PostDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def MinusMinus(self):
            return self.getToken(JavaScriptParser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecreaseExpression" ):
                listener.enterPostDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecreaseExpression" ):
                listener.exitPostDecreaseExpression(self)


    class TypeofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeof(self):
            return self.getToken(JavaScriptParser.Typeof, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class InstanceofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Instanceof(self):
            return self.getToken(JavaScriptParser.Instanceof, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceofExpression" ):
                listener.enterInstanceofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceofExpression" ):
                listener.exitInstanceofExpression(self)


    class UnaryPlusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(JavaScriptParser.Plus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusExpression" ):
                listener.enterUnaryPlusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusExpression" ):
                listener.exitUnaryPlusExpression(self)


    class DeleteExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(JavaScriptParser.Delete, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)


    class ImportExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportExpression" ):
                listener.enterImportExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportExpression" ):
                listener.exitImportExpression(self)


    class EqualityExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Equals_(self):
            return self.getToken(JavaScriptParser.Equals_, 0)
        def NotEquals(self):
            return self.getToken(JavaScriptParser.NotEquals, 0)
        def IdentityEquals(self):
            return self.getToken(JavaScriptParser.IdentityEquals, 0)
        def IdentityNotEquals(self):
            return self.getToken(JavaScriptParser.IdentityNotEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)


    class BitXOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def BitXOr(self):
            return self.getToken(JavaScriptParser.BitXOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXOrExpression" ):
                listener.enterBitXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXOrExpression" ):
                listener.exitBitXOrExpression(self)


    class SuperExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Super(self):
            return self.getToken(JavaScriptParser.Super, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)


    class MultiplicativeExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)
        def Divide(self):
            return self.getToken(JavaScriptParser.Divide, 0)
        def Modulus(self):
            return self.getToken(JavaScriptParser.Modulus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)


    class BitShiftExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def LeftShiftArithmetic(self):
            return self.getToken(JavaScriptParser.LeftShiftArithmetic, 0)
        def RightShiftArithmetic(self):
            return self.getToken(JavaScriptParser.RightShiftArithmetic, 0)
        def RightShiftLogical(self):
            return self.getToken(JavaScriptParser.RightShiftLogical, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)


    class ParenthesizedExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class AdditiveExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def Plus(self):
            return self.getToken(JavaScriptParser.Plus, 0)
        def Minus(self):
            return self.getToken(JavaScriptParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)


    class RelationalExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def LessThan(self):
            return self.getToken(JavaScriptParser.LessThan, 0)
        def MoreThan(self):
            return self.getToken(JavaScriptParser.MoreThan, 0)
        def LessThanEquals(self):
            return self.getToken(JavaScriptParser.LessThanEquals, 0)
        def GreaterThanEquals(self):
            return self.getToken(JavaScriptParser.GreaterThanEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)


    class PostIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def PlusPlus(self):
            return self.getToken(JavaScriptParser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)


    class YieldExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yieldStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.YieldStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)


    class BitNotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BitNot(self):
            return self.getToken(JavaScriptParser.BitNot, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotExpression" ):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotExpression" ):
                listener.exitBitNotExpression(self)


    class NewExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(JavaScriptParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class LiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(JavaScriptParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class ArrayLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrayLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteralExpression" ):
                listener.enterArrayLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteralExpression" ):
                listener.exitArrayLiteralExpression(self)


    class MemberDotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def Dot(self):
            return self.getToken(JavaScriptParser.Dot, 0)
        def identifierName(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext,0)

        def QuestionMark(self):
            return self.getToken(JavaScriptParser.QuestionMark, 0)
        def Hashtag(self):
            return self.getToken(JavaScriptParser.Hashtag, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDotExpression" ):
                listener.enterMemberDotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDotExpression" ):
                listener.exitMemberDotExpression(self)


    class ClassExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)
        def classTail(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassTailContext,0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)


    class MemberIndexExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)

        def OpenBracket(self):
            return self.getToken(JavaScriptParser.OpenBracket, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext,0)

        def CloseBracket(self):
            return self.getToken(JavaScriptParser.CloseBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberIndexExpression" ):
                listener.enterMemberIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberIndexExpression" ):
                listener.exitMemberIndexExpression(self)


    class IdentifierExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)


    class BitAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def BitAnd(self):
            return self.getToken(JavaScriptParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)


    class BitOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def BitOr(self):
            return self.getToken(JavaScriptParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)


    class AssignmentOperatorExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignmentOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperatorExpression" ):
                listener.enterAssignmentOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperatorExpression" ):
                listener.exitAssignmentOperatorExpression(self)


    class VoidExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(JavaScriptParser.Void, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidExpression" ):
                listener.enterVoidExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidExpression" ):
                listener.exitVoidExpression(self)


    class CoalesceExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,i)

        def NullCoalesce(self):
            return self.getToken(JavaScriptParser.NullCoalesce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesceExpression" ):
                listener.enterCoalesceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesceExpression" ):
                listener.exitCoalesceExpression(self)



    def singleExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaScriptParser.SingleExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_singleExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.FunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 729
                self.anonymousFunction()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 730
                self.match(JavaScriptParser.Class)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 731
                    self.identifier()


                self.state = 734
                self.classTail()
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 735
                self.match(JavaScriptParser.New)
                self.state = 736
                self.singleExpression(0)
                self.state = 737
                self.arguments()
                pass

            elif la_ == 4:
                localctx = JavaScriptParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 739
                self.match(JavaScriptParser.New)
                self.state = 740
                self.singleExpression(42)
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.MetaExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 741
                self.match(JavaScriptParser.New)
                self.state = 742
                self.match(JavaScriptParser.Dot)
                self.state = 743
                self.identifier()
                pass

            elif la_ == 6:
                localctx = JavaScriptParser.DeleteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 744
                self.match(JavaScriptParser.Delete)
                self.state = 745
                self.singleExpression(37)
                pass

            elif la_ == 7:
                localctx = JavaScriptParser.VoidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 746
                self.match(JavaScriptParser.Void)
                self.state = 747
                self.singleExpression(36)
                pass

            elif la_ == 8:
                localctx = JavaScriptParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 748
                self.match(JavaScriptParser.Typeof)
                self.state = 749
                self.singleExpression(35)
                pass

            elif la_ == 9:
                localctx = JavaScriptParser.PreIncrementExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 750
                self.match(JavaScriptParser.PlusPlus)
                self.state = 751
                self.singleExpression(34)
                pass

            elif la_ == 10:
                localctx = JavaScriptParser.PreDecreaseExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 752
                self.match(JavaScriptParser.MinusMinus)
                self.state = 753
                self.singleExpression(33)
                pass

            elif la_ == 11:
                localctx = JavaScriptParser.UnaryPlusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 754
                self.match(JavaScriptParser.Plus)
                self.state = 755
                self.singleExpression(32)
                pass

            elif la_ == 12:
                localctx = JavaScriptParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 756
                self.match(JavaScriptParser.Minus)
                self.state = 757
                self.singleExpression(31)
                pass

            elif la_ == 13:
                localctx = JavaScriptParser.BitNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 758
                self.match(JavaScriptParser.BitNot)
                self.state = 759
                self.singleExpression(30)
                pass

            elif la_ == 14:
                localctx = JavaScriptParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 760
                self.match(JavaScriptParser.Not)
                self.state = 761
                self.singleExpression(29)
                pass

            elif la_ == 15:
                localctx = JavaScriptParser.AwaitExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 762
                self.match(JavaScriptParser.Await)
                self.state = 763
                self.singleExpression(28)
                pass

            elif la_ == 16:
                localctx = JavaScriptParser.ImportExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 764
                self.match(JavaScriptParser.Import)
                self.state = 765
                self.match(JavaScriptParser.OpenParen)
                self.state = 766
                self.singleExpression(0)
                self.state = 767
                self.match(JavaScriptParser.CloseParen)
                pass

            elif la_ == 17:
                localctx = JavaScriptParser.YieldExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 769
                self.yieldStatement()
                pass

            elif la_ == 18:
                localctx = JavaScriptParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 770
                self.match(JavaScriptParser.This)
                pass

            elif la_ == 19:
                localctx = JavaScriptParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 771
                self.identifier()
                pass

            elif la_ == 20:
                localctx = JavaScriptParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 772
                self.match(JavaScriptParser.Super)
                pass

            elif la_ == 21:
                localctx = JavaScriptParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 773
                self.literal()
                pass

            elif la_ == 22:
                localctx = JavaScriptParser.ArrayLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 774
                self.arrayLiteral()
                pass

            elif la_ == 23:
                localctx = JavaScriptParser.ObjectLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 775
                self.objectLiteral()
                pass

            elif la_ == 24:
                localctx = JavaScriptParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 776
                self.match(JavaScriptParser.OpenParen)
                self.state = 777
                self.expressionSequence()
                self.state = 778
                self.match(JavaScriptParser.CloseParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 863
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 861
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                    if la_ == 1:
                        localctx = JavaScriptParser.PowerExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 782
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 783
                        self.match(JavaScriptParser.Power)
                        self.state = 784
                        self.singleExpression(27)
                        pass

                    elif la_ == 2:
                        localctx = JavaScriptParser.MultiplicativeExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 785
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 786
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.Multiply) | (1 << JavaScriptParser.Divide) | (1 << JavaScriptParser.Modulus))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 787
                        self.singleExpression(27)
                        pass

                    elif la_ == 3:
                        localctx = JavaScriptParser.AdditiveExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 788
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 789
                        _la = self._input.LA(1)
                        if not(_la==JavaScriptParser.Plus or _la==JavaScriptParser.Minus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 790
                        self.singleExpression(26)
                        pass

                    elif la_ == 4:
                        localctx = JavaScriptParser.CoalesceExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 791
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 792
                        self.match(JavaScriptParser.NullCoalesce)
                        self.state = 793
                        self.singleExpression(25)
                        pass

                    elif la_ == 5:
                        localctx = JavaScriptParser.BitShiftExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 794
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 795
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.RightShiftArithmetic) | (1 << JavaScriptParser.LeftShiftArithmetic) | (1 << JavaScriptParser.RightShiftLogical))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 796
                        self.singleExpression(24)
                        pass

                    elif la_ == 6:
                        localctx = JavaScriptParser.RelationalExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 797
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 798
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.LessThan) | (1 << JavaScriptParser.MoreThan) | (1 << JavaScriptParser.LessThanEquals) | (1 << JavaScriptParser.GreaterThanEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 799
                        self.singleExpression(23)
                        pass

                    elif la_ == 7:
                        localctx = JavaScriptParser.InstanceofExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 800
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 801
                        self.match(JavaScriptParser.Instanceof)
                        self.state = 802
                        self.singleExpression(22)
                        pass

                    elif la_ == 8:
                        localctx = JavaScriptParser.InExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 803
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 804
                        self.match(JavaScriptParser.In)
                        self.state = 805
                        self.singleExpression(21)
                        pass

                    elif la_ == 9:
                        localctx = JavaScriptParser.EqualityExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 806
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 807
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.Equals_) | (1 << JavaScriptParser.NotEquals) | (1 << JavaScriptParser.IdentityEquals) | (1 << JavaScriptParser.IdentityNotEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 808
                        self.singleExpression(20)
                        pass

                    elif la_ == 10:
                        localctx = JavaScriptParser.BitAndExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 809
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 810
                        self.match(JavaScriptParser.BitAnd)
                        self.state = 811
                        self.singleExpression(19)
                        pass

                    elif la_ == 11:
                        localctx = JavaScriptParser.BitXOrExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 812
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 813
                        self.match(JavaScriptParser.BitXOr)
                        self.state = 814
                        self.singleExpression(18)
                        pass

                    elif la_ == 12:
                        localctx = JavaScriptParser.BitOrExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 815
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 816
                        self.match(JavaScriptParser.BitOr)
                        self.state = 817
                        self.singleExpression(17)
                        pass

                    elif la_ == 13:
                        localctx = JavaScriptParser.LogicalAndExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 818
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 819
                        self.match(JavaScriptParser.And)
                        self.state = 820
                        self.singleExpression(16)
                        pass

                    elif la_ == 14:
                        localctx = JavaScriptParser.LogicalOrExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 821
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 822
                        self.match(JavaScriptParser.Or)
                        self.state = 823
                        self.singleExpression(15)
                        pass

                    elif la_ == 15:
                        localctx = JavaScriptParser.TernaryExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 824
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 825
                        self.match(JavaScriptParser.QuestionMark)
                        self.state = 826
                        self.singleExpression(0)
                        self.state = 827
                        self.match(JavaScriptParser.Colon)
                        self.state = 828
                        self.singleExpression(14)
                        pass

                    elif la_ == 16:
                        localctx = JavaScriptParser.AssignmentExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 830
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 831
                        self.match(JavaScriptParser.Assign)
                        self.state = 832
                        self.singleExpression(12)
                        pass

                    elif la_ == 17:
                        localctx = JavaScriptParser.AssignmentOperatorExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 833
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 834
                        self.assignmentOperator()
                        self.state = 835
                        self.singleExpression(11)
                        pass

                    elif la_ == 18:
                        localctx = JavaScriptParser.MemberIndexExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 837
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 838
                        self.match(JavaScriptParser.OpenBracket)
                        self.state = 839
                        self.expressionSequence()
                        self.state = 840
                        self.match(JavaScriptParser.CloseBracket)
                        pass

                    elif la_ == 19:
                        localctx = JavaScriptParser.MemberDotExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 842
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==JavaScriptParser.QuestionMark:
                            self.state = 843
                            self.match(JavaScriptParser.QuestionMark)


                        self.state = 846
                        self.match(JavaScriptParser.Dot)
                        self.state = 848
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==JavaScriptParser.Hashtag:
                            self.state = 847
                            self.match(JavaScriptParser.Hashtag)


                        self.state = 850
                        self.identifierName()
                        pass

                    elif la_ == 20:
                        localctx = JavaScriptParser.ArgumentsExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 851
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 852
                        self.arguments()
                        pass

                    elif la_ == 21:
                        localctx = JavaScriptParser.PostIncrementExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 853
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 854
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 855
                        self.match(JavaScriptParser.PlusPlus)
                        pass

                    elif la_ == 22:
                        localctx = JavaScriptParser.PostDecreaseExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 856
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 857
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 858
                        self.match(JavaScriptParser.MinusMinus)
                        pass

                    elif la_ == 23:
                        localctx = JavaScriptParser.TemplateStringExpressionContext(self, JavaScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 859
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 860
                        self.templateStringLiteral()
                        pass

             
                self.state = 865
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self):

        localctx = JavaScriptParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_assignable)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Async, JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.identifier()
                pass
            elif token in [JavaScriptParser.OpenBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.arrayLiteral()
                pass
            elif token in [JavaScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.objectLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(JavaScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(JavaScriptParser.CloseBrace, 0)

        def propertyAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.PropertyAssignmentContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.PropertyAssignmentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.Comma)
            else:
                return self.getToken(JavaScriptParser.Comma, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)




    def objectLiteral(self):

        localctx = JavaScriptParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(JavaScriptParser.OpenBrace)
            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 872
                self.propertyAssignment()
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 873
                        self.match(JavaScriptParser.Comma)
                        self.state = 874
                        self.propertyAssignment() 
                    self.state = 879
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)



            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaScriptParser.Comma:
                self.state = 882
                self.match(JavaScriptParser.Comma)


            self.state = 885
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaScriptParser.RULE_anonymousFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnonymousFunctionDeclContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function_(self):
            return self.getToken(JavaScriptParser.Function_, 0)
        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)
        def Multiply(self):
            return self.getToken(JavaScriptParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousFunctionDecl" ):
                listener.enterAnonymousFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousFunctionDecl" ):
                listener.exitAnonymousFunctionDecl(self)


    class ArrowFunctionContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrowFunctionParameters(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrowFunctionParametersContext,0)

        def ARROW(self):
            return self.getToken(JavaScriptParser.ARROW, 0)
        def arrowFunctionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrowFunctionBodyContext,0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunction" ):
                listener.enterArrowFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunction" ):
                listener.exitArrowFunction(self)


    class FunctionDeclContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaScriptParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)



    def anonymousFunction(self):

        localctx = JavaScriptParser.AnonymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_anonymousFunction)
        self._la = 0 # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.FunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.functionDeclaration()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.AnonymousFunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Async:
                    self.state = 888
                    self.match(JavaScriptParser.Async)


                self.state = 891
                self.match(JavaScriptParser.Function_)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaScriptParser.Multiply:
                    self.state = 892
                    self.match(JavaScriptParser.Multiply)


                self.state = 895
                self.match(JavaScriptParser.OpenParen)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 896
                    self.formalParameterList()


                self.state = 899
                self.match(JavaScriptParser.CloseParen)
                self.state = 900
                self.functionBody()
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.ArrowFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(JavaScriptParser.Async)


                self.state = 904
                self.arrowFunctionParameters()
                self.state = 905
                self.match(JavaScriptParser.ARROW)
                self.state = 906
                self.arrowFunctionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def OpenParen(self):
            return self.getToken(JavaScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(JavaScriptParser.CloseParen, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrowFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionParameters" ):
                listener.enterArrowFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionParameters" ):
                listener.exitArrowFunctionParameters(self)




    def arrowFunctionParameters(self):

        localctx = JavaScriptParser.ArrowFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arrowFunctionParameters)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Async, JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.identifier()
                pass
            elif token in [JavaScriptParser.OpenParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(JavaScriptParser.OpenParen)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0):
                    self.state = 912
                    self.formalParameterList()


                self.state = 915
                self.match(JavaScriptParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrowFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionBody" ):
                listener.enterArrowFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionBody" ):
                listener.exitArrowFunctionBody(self)




    def arrowFunctionBody(self):

        localctx = JavaScriptParser.ArrowFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrowFunctionBody)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiplyAssign(self):
            return self.getToken(JavaScriptParser.MultiplyAssign, 0)

        def DivideAssign(self):
            return self.getToken(JavaScriptParser.DivideAssign, 0)

        def ModulusAssign(self):
            return self.getToken(JavaScriptParser.ModulusAssign, 0)

        def PlusAssign(self):
            return self.getToken(JavaScriptParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(JavaScriptParser.MinusAssign, 0)

        def LeftShiftArithmeticAssign(self):
            return self.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0)

        def RightShiftArithmeticAssign(self):
            return self.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0)

        def RightShiftLogicalAssign(self):
            return self.getToken(JavaScriptParser.RightShiftLogicalAssign, 0)

        def BitAndAssign(self):
            return self.getToken(JavaScriptParser.BitAndAssign, 0)

        def BitXorAssign(self):
            return self.getToken(JavaScriptParser.BitXorAssign, 0)

        def BitOrAssign(self):
            return self.getToken(JavaScriptParser.BitOrAssign, 0)

        def PowerAssign(self):
            return self.getToken(JavaScriptParser.PowerAssign, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = JavaScriptParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaScriptParser.MultiplyAssign) | (1 << JavaScriptParser.DivideAssign) | (1 << JavaScriptParser.ModulusAssign) | (1 << JavaScriptParser.PlusAssign) | (1 << JavaScriptParser.MinusAssign) | (1 << JavaScriptParser.LeftShiftArithmeticAssign) | (1 << JavaScriptParser.RightShiftArithmeticAssign) | (1 << JavaScriptParser.RightShiftLogicalAssign) | (1 << JavaScriptParser.BitAndAssign) | (1 << JavaScriptParser.BitXorAssign) | (1 << JavaScriptParser.BitOrAssign) | (1 << JavaScriptParser.PowerAssign))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(JavaScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(JavaScriptParser.BooleanLiteral, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.TemplateStringLiteralContext,0)


        def RegularExpressionLiteral(self):
            return self.getToken(JavaScriptParser.RegularExpressionLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.NumericLiteralContext,0)


        def bigintLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.BigintLiteralContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaScriptParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_literal)
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(JavaScriptParser.NullLiteral)
                pass
            elif token in [JavaScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(JavaScriptParser.BooleanLiteral)
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.match(JavaScriptParser.StringLiteral)
                pass
            elif token in [JavaScriptParser.BackTick]:
                self.enterOuterAlt(localctx, 4)
                self.state = 927
                self.templateStringLiteral()
                pass
            elif token in [JavaScriptParser.RegularExpressionLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 928
                self.match(JavaScriptParser.RegularExpressionLiteral)
                pass
            elif token in [JavaScriptParser.DecimalLiteral, JavaScriptParser.HexIntegerLiteral, JavaScriptParser.OctalIntegerLiteral, JavaScriptParser.OctalIntegerLiteral2, JavaScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 929
                self.numericLiteral()
                pass
            elif token in [JavaScriptParser.BigHexIntegerLiteral, JavaScriptParser.BigOctalIntegerLiteral, JavaScriptParser.BigBinaryIntegerLiteral, JavaScriptParser.BigDecimalIntegerLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 930
                self.bigintLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BackTick(self, i:int=None):
            if i is None:
                return self.getTokens(JavaScriptParser.BackTick)
            else:
                return self.getToken(JavaScriptParser.BackTick, i)

        def templateStringAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.TemplateStringAtomContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.TemplateStringAtomContext,i)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_templateStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringLiteral" ):
                listener.enterTemplateStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringLiteral" ):
                listener.exitTemplateStringLiteral(self)




    def templateStringLiteral(self):

        localctx = JavaScriptParser.TemplateStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_templateStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(JavaScriptParser.BackTick)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaScriptParser.TemplateStringStartExpression or _la==JavaScriptParser.TemplateStringAtom:
                self.state = 934
                self.templateStringAtom()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 940
            self.match(JavaScriptParser.BackTick)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TemplateStringAtom(self):
            return self.getToken(JavaScriptParser.TemplateStringAtom, 0)

        def TemplateStringStartExpression(self):
            return self.getToken(JavaScriptParser.TemplateStringStartExpression, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext,0)


        def TemplateCloseBrace(self):
            return self.getToken(JavaScriptParser.TemplateCloseBrace, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_templateStringAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringAtom" ):
                listener.enterTemplateStringAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringAtom" ):
                listener.exitTemplateStringAtom(self)




    def templateStringAtom(self):

        localctx = JavaScriptParser.TemplateStringAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_templateStringAtom)
        try:
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.TemplateStringAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(JavaScriptParser.TemplateStringAtom)
                pass
            elif token in [JavaScriptParser.TemplateStringStartExpression]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(JavaScriptParser.TemplateStringStartExpression)
                self.state = 944
                self.singleExpression(0)
                self.state = 945
                self.match(JavaScriptParser.TemplateCloseBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(JavaScriptParser.DecimalLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(JavaScriptParser.HexIntegerLiteral, 0)

        def OctalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.OctalIntegerLiteral, 0)

        def OctalIntegerLiteral2(self):
            return self.getToken(JavaScriptParser.OctalIntegerLiteral2, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)




    def numericLiteral(self):

        localctx = JavaScriptParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_numericLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (JavaScriptParser.DecimalLiteral - 62)) | (1 << (JavaScriptParser.HexIntegerLiteral - 62)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 62)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 62)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BigintLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BigDecimalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0)

        def BigHexIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigHexIntegerLiteral, 0)

        def BigOctalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0)

        def BigBinaryIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_bigintLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigintLiteral" ):
                listener.enterBigintLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigintLiteral" ):
                listener.exitBigintLiteral(self)




    def bigintLiteral(self):

        localctx = JavaScriptParser.BigintLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_bigintLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaScriptParser.BigHexIntegerLiteral - 67)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 67)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 67)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = JavaScriptParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            if not self.n("get"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"get\")")
            self.state = 954
            self.identifier()
            self.state = 955
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = JavaScriptParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            if not self.n("set"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"set\")")
            self.state = 958
            self.identifier()
            self.state = 959
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext,0)


        def reservedWord(self):
            return self.getTypedRuleContext(JavaScriptParser.ReservedWordContext,0)


        def getRuleIndex(self):
            return JavaScriptParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)




    def identifierName(self):

        localctx = JavaScriptParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_identifierName)
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.reservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaScriptParser.Identifier, 0)

        def NonStrictLet(self):
            return self.getToken(JavaScriptParser.NonStrictLet, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = JavaScriptParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (JavaScriptParser.Async - 106)) | (1 << (JavaScriptParser.NonStrictLet - 106)) | (1 << (JavaScriptParser.Identifier - 106)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(JavaScriptParser.KeywordContext,0)


        def NullLiteral(self):
            return self.getToken(JavaScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(JavaScriptParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)




    def reservedWord(self):

        localctx = JavaScriptParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_reservedWord)
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function_, JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield]:
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.keyword()
                pass
            elif token in [JavaScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 968
                self.match(JavaScriptParser.NullLiteral)
                pass
            elif token in [JavaScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 969
                self.match(JavaScriptParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(JavaScriptParser.Break, 0)

        def Do(self):
            return self.getToken(JavaScriptParser.Do, 0)

        def Instanceof(self):
            return self.getToken(JavaScriptParser.Instanceof, 0)

        def Typeof(self):
            return self.getToken(JavaScriptParser.Typeof, 0)

        def Case(self):
            return self.getToken(JavaScriptParser.Case, 0)

        def Else(self):
            return self.getToken(JavaScriptParser.Else, 0)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)

        def Var(self):
            return self.getToken(JavaScriptParser.Var, 0)

        def Catch(self):
            return self.getToken(JavaScriptParser.Catch, 0)

        def Finally(self):
            return self.getToken(JavaScriptParser.Finally, 0)

        def Return(self):
            return self.getToken(JavaScriptParser.Return, 0)

        def Void(self):
            return self.getToken(JavaScriptParser.Void, 0)

        def Continue(self):
            return self.getToken(JavaScriptParser.Continue, 0)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)

        def Switch(self):
            return self.getToken(JavaScriptParser.Switch, 0)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)

        def Debugger(self):
            return self.getToken(JavaScriptParser.Debugger, 0)

        def Function_(self):
            return self.getToken(JavaScriptParser.Function_, 0)

        def This(self):
            return self.getToken(JavaScriptParser.This, 0)

        def With(self):
            return self.getToken(JavaScriptParser.With, 0)

        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)

        def If(self):
            return self.getToken(JavaScriptParser.If, 0)

        def Throw(self):
            return self.getToken(JavaScriptParser.Throw, 0)

        def Delete(self):
            return self.getToken(JavaScriptParser.Delete, 0)

        def In(self):
            return self.getToken(JavaScriptParser.In, 0)

        def Try(self):
            return self.getToken(JavaScriptParser.Try, 0)

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)

        def Enum(self):
            return self.getToken(JavaScriptParser.Enum, 0)

        def Extends(self):
            return self.getToken(JavaScriptParser.Extends, 0)

        def Super(self):
            return self.getToken(JavaScriptParser.Super, 0)

        def Const(self):
            return self.getToken(JavaScriptParser.Const, 0)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)

        def Implements(self):
            return self.getToken(JavaScriptParser.Implements, 0)

        def let_(self):
            return self.getTypedRuleContext(JavaScriptParser.Let_Context,0)


        def Private(self):
            return self.getToken(JavaScriptParser.Private, 0)

        def Public(self):
            return self.getToken(JavaScriptParser.Public, 0)

        def Interface(self):
            return self.getToken(JavaScriptParser.Interface, 0)

        def Package(self):
            return self.getToken(JavaScriptParser.Package, 0)

        def Protected(self):
            return self.getToken(JavaScriptParser.Protected, 0)

        def Static(self):
            return self.getToken(JavaScriptParser.Static, 0)

        def Yield(self):
            return self.getToken(JavaScriptParser.Yield, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)

        def From(self):
            return self.getToken(JavaScriptParser.From, 0)

        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = JavaScriptParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_keyword)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Break]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.match(JavaScriptParser.Break)
                pass
            elif token in [JavaScriptParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.match(JavaScriptParser.Do)
                pass
            elif token in [JavaScriptParser.Instanceof]:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.match(JavaScriptParser.Instanceof)
                pass
            elif token in [JavaScriptParser.Typeof]:
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.match(JavaScriptParser.Typeof)
                pass
            elif token in [JavaScriptParser.Case]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.match(JavaScriptParser.Case)
                pass
            elif token in [JavaScriptParser.Else]:
                self.enterOuterAlt(localctx, 6)
                self.state = 977
                self.match(JavaScriptParser.Else)
                pass
            elif token in [JavaScriptParser.New]:
                self.enterOuterAlt(localctx, 7)
                self.state = 978
                self.match(JavaScriptParser.New)
                pass
            elif token in [JavaScriptParser.Var]:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.match(JavaScriptParser.Var)
                pass
            elif token in [JavaScriptParser.Catch]:
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.match(JavaScriptParser.Catch)
                pass
            elif token in [JavaScriptParser.Finally]:
                self.enterOuterAlt(localctx, 10)
                self.state = 981
                self.match(JavaScriptParser.Finally)
                pass
            elif token in [JavaScriptParser.Return]:
                self.enterOuterAlt(localctx, 11)
                self.state = 982
                self.match(JavaScriptParser.Return)
                pass
            elif token in [JavaScriptParser.Void]:
                self.enterOuterAlt(localctx, 12)
                self.state = 983
                self.match(JavaScriptParser.Void)
                pass
            elif token in [JavaScriptParser.Continue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 984
                self.match(JavaScriptParser.Continue)
                pass
            elif token in [JavaScriptParser.For]:
                self.enterOuterAlt(localctx, 14)
                self.state = 985
                self.match(JavaScriptParser.For)
                pass
            elif token in [JavaScriptParser.Switch]:
                self.enterOuterAlt(localctx, 15)
                self.state = 986
                self.match(JavaScriptParser.Switch)
                pass
            elif token in [JavaScriptParser.While]:
                self.enterOuterAlt(localctx, 16)
                self.state = 987
                self.match(JavaScriptParser.While)
                pass
            elif token in [JavaScriptParser.Debugger]:
                self.enterOuterAlt(localctx, 17)
                self.state = 988
                self.match(JavaScriptParser.Debugger)
                pass
            elif token in [JavaScriptParser.Function_]:
                self.enterOuterAlt(localctx, 18)
                self.state = 989
                self.match(JavaScriptParser.Function_)
                pass
            elif token in [JavaScriptParser.This]:
                self.enterOuterAlt(localctx, 19)
                self.state = 990
                self.match(JavaScriptParser.This)
                pass
            elif token in [JavaScriptParser.With]:
                self.enterOuterAlt(localctx, 20)
                self.state = 991
                self.match(JavaScriptParser.With)
                pass
            elif token in [JavaScriptParser.Default]:
                self.enterOuterAlt(localctx, 21)
                self.state = 992
                self.match(JavaScriptParser.Default)
                pass
            elif token in [JavaScriptParser.If]:
                self.enterOuterAlt(localctx, 22)
                self.state = 993
                self.match(JavaScriptParser.If)
                pass
            elif token in [JavaScriptParser.Throw]:
                self.enterOuterAlt(localctx, 23)
                self.state = 994
                self.match(JavaScriptParser.Throw)
                pass
            elif token in [JavaScriptParser.Delete]:
                self.enterOuterAlt(localctx, 24)
                self.state = 995
                self.match(JavaScriptParser.Delete)
                pass
            elif token in [JavaScriptParser.In]:
                self.enterOuterAlt(localctx, 25)
                self.state = 996
                self.match(JavaScriptParser.In)
                pass
            elif token in [JavaScriptParser.Try]:
                self.enterOuterAlt(localctx, 26)
                self.state = 997
                self.match(JavaScriptParser.Try)
                pass
            elif token in [JavaScriptParser.Class]:
                self.enterOuterAlt(localctx, 27)
                self.state = 998
                self.match(JavaScriptParser.Class)
                pass
            elif token in [JavaScriptParser.Enum]:
                self.enterOuterAlt(localctx, 28)
                self.state = 999
                self.match(JavaScriptParser.Enum)
                pass
            elif token in [JavaScriptParser.Extends]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1000
                self.match(JavaScriptParser.Extends)
                pass
            elif token in [JavaScriptParser.Super]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1001
                self.match(JavaScriptParser.Super)
                pass
            elif token in [JavaScriptParser.Const]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1002
                self.match(JavaScriptParser.Const)
                pass
            elif token in [JavaScriptParser.Export]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1003
                self.match(JavaScriptParser.Export)
                pass
            elif token in [JavaScriptParser.Import]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1004
                self.match(JavaScriptParser.Import)
                pass
            elif token in [JavaScriptParser.Implements]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1005
                self.match(JavaScriptParser.Implements)
                pass
            elif token in [JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1006
                self.let_()
                pass
            elif token in [JavaScriptParser.Private]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1007
                self.match(JavaScriptParser.Private)
                pass
            elif token in [JavaScriptParser.Public]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1008
                self.match(JavaScriptParser.Public)
                pass
            elif token in [JavaScriptParser.Interface]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1009
                self.match(JavaScriptParser.Interface)
                pass
            elif token in [JavaScriptParser.Package]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1010
                self.match(JavaScriptParser.Package)
                pass
            elif token in [JavaScriptParser.Protected]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1011
                self.match(JavaScriptParser.Protected)
                pass
            elif token in [JavaScriptParser.Static]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1012
                self.match(JavaScriptParser.Static)
                pass
            elif token in [JavaScriptParser.Yield]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1013
                self.match(JavaScriptParser.Yield)
                pass
            elif token in [JavaScriptParser.Async]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1014
                self.match(JavaScriptParser.Async)
                pass
            elif token in [JavaScriptParser.Await]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1015
                self.match(JavaScriptParser.Await)
                pass
            elif token in [JavaScriptParser.From]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1016
                self.match(JavaScriptParser.From)
                pass
            elif token in [JavaScriptParser.As]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1017
                self.match(JavaScriptParser.As)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonStrictLet(self):
            return self.getToken(JavaScriptParser.NonStrictLet, 0)

        def StrictLet(self):
            return self.getToken(JavaScriptParser.StrictLet, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_let_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_" ):
                listener.enterLet_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_" ):
                listener.exitLet_(self)




    def let_(self):

        localctx = JavaScriptParser.Let_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_let_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            _la = self._input.LA(1)
            if not(_la==JavaScriptParser.StrictLet or _la==JavaScriptParser.NonStrictLet):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(JavaScriptParser.SemiColon, 0)

        def EOF(self):
            return self.getToken(JavaScriptParser.EOF, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = JavaScriptParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_eos)
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.match(JavaScriptParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(JavaScriptParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1024
                if not self.lineTerminatorAhead():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.lineTerminatorAhead()")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1025
                if not self.closeBrace():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.closeBrace()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[19] = self.expressionStatement_sempred
        self._predicates[21] = self.iterationStatement_sempred
        self._predicates[23] = self.continueStatement_sempred
        self._predicates[24] = self.breakStatement_sempred
        self._predicates[25] = self.returnStatement_sempred
        self._predicates[26] = self.yieldStatement_sempred
        self._predicates[34] = self.throwStatement_sempred
        self._predicates[42] = self.classElement_sempred
        self._predicates[57] = self.singleExpression_sempred
        self._predicates[69] = self.getter_sempred
        self._predicates[70] = self.setter_sempred
        self._predicates[76] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expressionStatement_sempred(self, localctx:ExpressionStatementContext, predIndex:int):
            if predIndex == 0:
                return self.notOpenBraceAndNotFunction()
         

    def iterationStatement_sempred(self, localctx:IterationStatementContext, predIndex:int):
            if predIndex == 1:
                return self.p("of")
         

    def continueStatement_sempred(self, localctx:ContinueStatementContext, predIndex:int):
            if predIndex == 2:
                return self.notLineTerminator()
         

    def breakStatement_sempred(self, localctx:BreakStatementContext, predIndex:int):
            if predIndex == 3:
                return self.notLineTerminator()
         

    def returnStatement_sempred(self, localctx:ReturnStatementContext, predIndex:int):
            if predIndex == 4:
                return self.notLineTerminator()
         

    def yieldStatement_sempred(self, localctx:YieldStatementContext, predIndex:int):
            if predIndex == 5:
                return self.notLineTerminator()
         

    def throwStatement_sempred(self, localctx:ThrowStatementContext, predIndex:int):
            if predIndex == 6:
                return self.notLineTerminator()
         

    def classElement_sempred(self, localctx:ClassElementContext, predIndex:int):
            if predIndex == 7:
                return self.n("static")
         

    def singleExpression_sempred(self, localctx:SingleExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 29:
                return self.notLineTerminator()
         

            if predIndex == 30:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 31:
                return self.notLineTerminator()
         

            if predIndex == 32:
                return self.precpred(self._ctx, 9)
         

    def getter_sempred(self, localctx:GetterContext, predIndex:int):
            if predIndex == 33:
                return self.n("get")
         

    def setter_sempred(self, localctx:SetterContext, predIndex:int):
            if predIndex == 34:
                return self.n("set")
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 35:
                return self.lineTerminatorAhead()
         

            if predIndex == 36:
                return self.closeBrace()
         




